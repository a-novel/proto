// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/story-structure/stc_beat_to_plot_point.proto

package storystructurepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BeatToPlotPointService_GetPlotPointBeats_FullMethodName       = "/structure.BeatToPlotPointService/GetPlotPointBeats"
	BeatToPlotPointService_GetBeatPlotPoints_FullMethodName       = "/structure.BeatToPlotPointService/GetBeatPlotPoints"
	BeatToPlotPointService_LinkPlotPointToBeat_FullMethodName     = "/structure.BeatToPlotPointService/LinkPlotPointToBeat"
	BeatToPlotPointService_UnlinkPlotPointFromBeat_FullMethodName = "/structure.BeatToPlotPointService/UnlinkPlotPointFromBeat"
)

// BeatToPlotPointServiceClient is the client API for BeatToPlotPointService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BeatToPlotPointServiceClient interface {
	// Retrieve the ids of the beats related to a plot point.
	GetPlotPointBeats(ctx context.Context, in *GetPlotPointBeatsRequest, opts ...grpc.CallOption) (*GetPlotPointBeatsResponse, error)
	// Retrieve the ids of the plot points related to a beat.
	GetBeatPlotPoints(ctx context.Context, in *GetBeatPlotPointsRequest, opts ...grpc.CallOption) (*GetBeatPlotPointsResponse, error)
	// Link a beat to a plot point.
	LinkPlotPointToBeat(ctx context.Context, in *LinkPlotPointToBeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Unlink a beat from a plot point.
	UnlinkPlotPointFromBeat(ctx context.Context, in *UnlinkPlotPointFromBeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type beatToPlotPointServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBeatToPlotPointServiceClient(cc grpc.ClientConnInterface) BeatToPlotPointServiceClient {
	return &beatToPlotPointServiceClient{cc}
}

func (c *beatToPlotPointServiceClient) GetPlotPointBeats(ctx context.Context, in *GetPlotPointBeatsRequest, opts ...grpc.CallOption) (*GetPlotPointBeatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlotPointBeatsResponse)
	err := c.cc.Invoke(ctx, BeatToPlotPointService_GetPlotPointBeats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beatToPlotPointServiceClient) GetBeatPlotPoints(ctx context.Context, in *GetBeatPlotPointsRequest, opts ...grpc.CallOption) (*GetBeatPlotPointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBeatPlotPointsResponse)
	err := c.cc.Invoke(ctx, BeatToPlotPointService_GetBeatPlotPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beatToPlotPointServiceClient) LinkPlotPointToBeat(ctx context.Context, in *LinkPlotPointToBeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BeatToPlotPointService_LinkPlotPointToBeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beatToPlotPointServiceClient) UnlinkPlotPointFromBeat(ctx context.Context, in *UnlinkPlotPointFromBeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BeatToPlotPointService_UnlinkPlotPointFromBeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeatToPlotPointServiceServer is the server API for BeatToPlotPointService service.
// All implementations must embed UnimplementedBeatToPlotPointServiceServer
// for forward compatibility.
type BeatToPlotPointServiceServer interface {
	// Retrieve the ids of the beats related to a plot point.
	GetPlotPointBeats(context.Context, *GetPlotPointBeatsRequest) (*GetPlotPointBeatsResponse, error)
	// Retrieve the ids of the plot points related to a beat.
	GetBeatPlotPoints(context.Context, *GetBeatPlotPointsRequest) (*GetBeatPlotPointsResponse, error)
	// Link a beat to a plot point.
	LinkPlotPointToBeat(context.Context, *LinkPlotPointToBeatRequest) (*emptypb.Empty, error)
	// Unlink a beat from a plot point.
	UnlinkPlotPointFromBeat(context.Context, *UnlinkPlotPointFromBeatRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBeatToPlotPointServiceServer()
}

// UnimplementedBeatToPlotPointServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBeatToPlotPointServiceServer struct{}

func (UnimplementedBeatToPlotPointServiceServer) GetPlotPointBeats(context.Context, *GetPlotPointBeatsRequest) (*GetPlotPointBeatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlotPointBeats not implemented")
}
func (UnimplementedBeatToPlotPointServiceServer) GetBeatPlotPoints(context.Context, *GetBeatPlotPointsRequest) (*GetBeatPlotPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeatPlotPoints not implemented")
}
func (UnimplementedBeatToPlotPointServiceServer) LinkPlotPointToBeat(context.Context, *LinkPlotPointToBeatRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkPlotPointToBeat not implemented")
}
func (UnimplementedBeatToPlotPointServiceServer) UnlinkPlotPointFromBeat(context.Context, *UnlinkPlotPointFromBeatRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkPlotPointFromBeat not implemented")
}
func (UnimplementedBeatToPlotPointServiceServer) mustEmbedUnimplementedBeatToPlotPointServiceServer() {
}
func (UnimplementedBeatToPlotPointServiceServer) testEmbeddedByValue() {}

// UnsafeBeatToPlotPointServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BeatToPlotPointServiceServer will
// result in compilation errors.
type UnsafeBeatToPlotPointServiceServer interface {
	mustEmbedUnimplementedBeatToPlotPointServiceServer()
}

func RegisterBeatToPlotPointServiceServer(s grpc.ServiceRegistrar, srv BeatToPlotPointServiceServer) {
	// If the following call pancis, it indicates UnimplementedBeatToPlotPointServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BeatToPlotPointService_ServiceDesc, srv)
}

func _BeatToPlotPointService_GetPlotPointBeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlotPointBeatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeatToPlotPointServiceServer).GetPlotPointBeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeatToPlotPointService_GetPlotPointBeats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeatToPlotPointServiceServer).GetPlotPointBeats(ctx, req.(*GetPlotPointBeatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeatToPlotPointService_GetBeatPlotPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBeatPlotPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeatToPlotPointServiceServer).GetBeatPlotPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeatToPlotPointService_GetBeatPlotPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeatToPlotPointServiceServer).GetBeatPlotPoints(ctx, req.(*GetBeatPlotPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeatToPlotPointService_LinkPlotPointToBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkPlotPointToBeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeatToPlotPointServiceServer).LinkPlotPointToBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeatToPlotPointService_LinkPlotPointToBeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeatToPlotPointServiceServer).LinkPlotPointToBeat(ctx, req.(*LinkPlotPointToBeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeatToPlotPointService_UnlinkPlotPointFromBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlinkPlotPointFromBeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeatToPlotPointServiceServer).UnlinkPlotPointFromBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeatToPlotPointService_UnlinkPlotPointFromBeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeatToPlotPointServiceServer).UnlinkPlotPointFromBeat(ctx, req.(*UnlinkPlotPointFromBeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BeatToPlotPointService_ServiceDesc is the grpc.ServiceDesc for BeatToPlotPointService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BeatToPlotPointService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "structure.BeatToPlotPointService",
	HandlerType: (*BeatToPlotPointServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlotPointBeats",
			Handler:    _BeatToPlotPointService_GetPlotPointBeats_Handler,
		},
		{
			MethodName: "GetBeatPlotPoints",
			Handler:    _BeatToPlotPointService_GetBeatPlotPoints_Handler,
		},
		{
			MethodName: "LinkPlotPointToBeat",
			Handler:    _BeatToPlotPointService_LinkPlotPointToBeat_Handler,
		},
		{
			MethodName: "UnlinkPlotPointFromBeat",
			Handler:    _BeatToPlotPointService_UnlinkPlotPointFromBeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/story-structure/stc_beat_to_plot_point.proto",
}
