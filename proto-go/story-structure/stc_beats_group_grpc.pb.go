// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/story-structure/stc_beats_group.proto

package storystructurepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BeatsGroupService_GetBeatsGroup_FullMethodName     = "/structure.BeatsGroupService/GetBeatsGroup"
	BeatsGroupService_ListBeatsGroups_FullMethodName   = "/structure.BeatsGroupService/ListBeatsGroups"
	BeatsGroupService_SearchBeatsGroups_FullMethodName = "/structure.BeatsGroupService/SearchBeatsGroups"
	BeatsGroupService_CreateBeatsGroup_FullMethodName  = "/structure.BeatsGroupService/CreateBeatsGroup"
	BeatsGroupService_UpdateBeatsGroup_FullMethodName  = "/structure.BeatsGroupService/UpdateBeatsGroup"
	BeatsGroupService_DeleteBeatsGroup_FullMethodName  = "/structure.BeatsGroupService/DeleteBeatsGroup"
)

// BeatsGroupServiceClient is the client API for BeatsGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BeatsGroupServiceClient interface {
	// Get a specific beats group details.
	GetBeatsGroup(ctx context.Context, in *GetBeatsGroupRequest, opts ...grpc.CallOption) (*BeatsGroup, error)
	// Return a list of beats groups, based on a list of IDs provided.
	ListBeatsGroups(ctx context.Context, in *ListBeatsGroupsRequest, opts ...grpc.CallOption) (*ListBeatsGroupsResponse, error)
	// Return a list of beats group ids, based on a search query. You can then use ListBeatsGroups to retrieve
	// the specific details of each beats group.
	SearchBeatsGroups(ctx context.Context, in *SearchBeatsGroupsRequest, opts ...grpc.CallOption) (*SearchBeatsGroupsResponse, error)
	// Create a new beats group.
	CreateBeatsGroup(ctx context.Context, in *CreateBeatsGroupRequest, opts ...grpc.CallOption) (*BeatsGroup, error)
	// Update an existing beats group.
	UpdateBeatsGroup(ctx context.Context, in *UpdateBeatsGroupRequest, opts ...grpc.CallOption) (*BeatsGroup, error)
	// Delete an existing beats group. This method should not fail if the beats group does not exist.
	DeleteBeatsGroup(ctx context.Context, in *DeleteBeatsGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type beatsGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBeatsGroupServiceClient(cc grpc.ClientConnInterface) BeatsGroupServiceClient {
	return &beatsGroupServiceClient{cc}
}

func (c *beatsGroupServiceClient) GetBeatsGroup(ctx context.Context, in *GetBeatsGroupRequest, opts ...grpc.CallOption) (*BeatsGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BeatsGroup)
	err := c.cc.Invoke(ctx, BeatsGroupService_GetBeatsGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beatsGroupServiceClient) ListBeatsGroups(ctx context.Context, in *ListBeatsGroupsRequest, opts ...grpc.CallOption) (*ListBeatsGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBeatsGroupsResponse)
	err := c.cc.Invoke(ctx, BeatsGroupService_ListBeatsGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beatsGroupServiceClient) SearchBeatsGroups(ctx context.Context, in *SearchBeatsGroupsRequest, opts ...grpc.CallOption) (*SearchBeatsGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchBeatsGroupsResponse)
	err := c.cc.Invoke(ctx, BeatsGroupService_SearchBeatsGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beatsGroupServiceClient) CreateBeatsGroup(ctx context.Context, in *CreateBeatsGroupRequest, opts ...grpc.CallOption) (*BeatsGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BeatsGroup)
	err := c.cc.Invoke(ctx, BeatsGroupService_CreateBeatsGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beatsGroupServiceClient) UpdateBeatsGroup(ctx context.Context, in *UpdateBeatsGroupRequest, opts ...grpc.CallOption) (*BeatsGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BeatsGroup)
	err := c.cc.Invoke(ctx, BeatsGroupService_UpdateBeatsGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beatsGroupServiceClient) DeleteBeatsGroup(ctx context.Context, in *DeleteBeatsGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BeatsGroupService_DeleteBeatsGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeatsGroupServiceServer is the server API for BeatsGroupService service.
// All implementations must embed UnimplementedBeatsGroupServiceServer
// for forward compatibility.
type BeatsGroupServiceServer interface {
	// Get a specific beats group details.
	GetBeatsGroup(context.Context, *GetBeatsGroupRequest) (*BeatsGroup, error)
	// Return a list of beats groups, based on a list of IDs provided.
	ListBeatsGroups(context.Context, *ListBeatsGroupsRequest) (*ListBeatsGroupsResponse, error)
	// Return a list of beats group ids, based on a search query. You can then use ListBeatsGroups to retrieve
	// the specific details of each beats group.
	SearchBeatsGroups(context.Context, *SearchBeatsGroupsRequest) (*SearchBeatsGroupsResponse, error)
	// Create a new beats group.
	CreateBeatsGroup(context.Context, *CreateBeatsGroupRequest) (*BeatsGroup, error)
	// Update an existing beats group.
	UpdateBeatsGroup(context.Context, *UpdateBeatsGroupRequest) (*BeatsGroup, error)
	// Delete an existing beats group. This method should not fail if the beats group does not exist.
	DeleteBeatsGroup(context.Context, *DeleteBeatsGroupRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBeatsGroupServiceServer()
}

// UnimplementedBeatsGroupServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBeatsGroupServiceServer struct{}

func (UnimplementedBeatsGroupServiceServer) GetBeatsGroup(context.Context, *GetBeatsGroupRequest) (*BeatsGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeatsGroup not implemented")
}
func (UnimplementedBeatsGroupServiceServer) ListBeatsGroups(context.Context, *ListBeatsGroupsRequest) (*ListBeatsGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBeatsGroups not implemented")
}
func (UnimplementedBeatsGroupServiceServer) SearchBeatsGroups(context.Context, *SearchBeatsGroupsRequest) (*SearchBeatsGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBeatsGroups not implemented")
}
func (UnimplementedBeatsGroupServiceServer) CreateBeatsGroup(context.Context, *CreateBeatsGroupRequest) (*BeatsGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBeatsGroup not implemented")
}
func (UnimplementedBeatsGroupServiceServer) UpdateBeatsGroup(context.Context, *UpdateBeatsGroupRequest) (*BeatsGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBeatsGroup not implemented")
}
func (UnimplementedBeatsGroupServiceServer) DeleteBeatsGroup(context.Context, *DeleteBeatsGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBeatsGroup not implemented")
}
func (UnimplementedBeatsGroupServiceServer) mustEmbedUnimplementedBeatsGroupServiceServer() {}
func (UnimplementedBeatsGroupServiceServer) testEmbeddedByValue()                           {}

// UnsafeBeatsGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BeatsGroupServiceServer will
// result in compilation errors.
type UnsafeBeatsGroupServiceServer interface {
	mustEmbedUnimplementedBeatsGroupServiceServer()
}

func RegisterBeatsGroupServiceServer(s grpc.ServiceRegistrar, srv BeatsGroupServiceServer) {
	// If the following call pancis, it indicates UnimplementedBeatsGroupServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BeatsGroupService_ServiceDesc, srv)
}

func _BeatsGroupService_GetBeatsGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBeatsGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeatsGroupServiceServer).GetBeatsGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeatsGroupService_GetBeatsGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeatsGroupServiceServer).GetBeatsGroup(ctx, req.(*GetBeatsGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeatsGroupService_ListBeatsGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBeatsGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeatsGroupServiceServer).ListBeatsGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeatsGroupService_ListBeatsGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeatsGroupServiceServer).ListBeatsGroups(ctx, req.(*ListBeatsGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeatsGroupService_SearchBeatsGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBeatsGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeatsGroupServiceServer).SearchBeatsGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeatsGroupService_SearchBeatsGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeatsGroupServiceServer).SearchBeatsGroups(ctx, req.(*SearchBeatsGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeatsGroupService_CreateBeatsGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBeatsGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeatsGroupServiceServer).CreateBeatsGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeatsGroupService_CreateBeatsGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeatsGroupServiceServer).CreateBeatsGroup(ctx, req.(*CreateBeatsGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeatsGroupService_UpdateBeatsGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBeatsGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeatsGroupServiceServer).UpdateBeatsGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeatsGroupService_UpdateBeatsGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeatsGroupServiceServer).UpdateBeatsGroup(ctx, req.(*UpdateBeatsGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeatsGroupService_DeleteBeatsGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBeatsGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeatsGroupServiceServer).DeleteBeatsGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeatsGroupService_DeleteBeatsGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeatsGroupServiceServer).DeleteBeatsGroup(ctx, req.(*DeleteBeatsGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BeatsGroupService_ServiceDesc is the grpc.ServiceDesc for BeatsGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BeatsGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "structure.BeatsGroupService",
	HandlerType: (*BeatsGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBeatsGroup",
			Handler:    _BeatsGroupService_GetBeatsGroup_Handler,
		},
		{
			MethodName: "ListBeatsGroups",
			Handler:    _BeatsGroupService_ListBeatsGroups_Handler,
		},
		{
			MethodName: "SearchBeatsGroups",
			Handler:    _BeatsGroupService_SearchBeatsGroups_Handler,
		},
		{
			MethodName: "CreateBeatsGroup",
			Handler:    _BeatsGroupService_CreateBeatsGroup_Handler,
		},
		{
			MethodName: "UpdateBeatsGroup",
			Handler:    _BeatsGroupService_UpdateBeatsGroup_Handler,
		},
		{
			MethodName: "DeleteBeatsGroup",
			Handler:    _BeatsGroupService_DeleteBeatsGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/story-structure/stc_beats_group.proto",
}
