// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/story-structure/stc_beat_to_beats_group.proto

package storystructurepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BeatToBeatsGroupService_GetBeatsGroupBeats_FullMethodName       = "/structure.BeatToBeatsGroupService/GetBeatsGroupBeats"
	BeatToBeatsGroupService_GetBeatBeatsGroups_FullMethodName       = "/structure.BeatToBeatsGroupService/GetBeatBeatsGroups"
	BeatToBeatsGroupService_LinkBeatToBeatsGroup_FullMethodName     = "/structure.BeatToBeatsGroupService/LinkBeatToBeatsGroup"
	BeatToBeatsGroupService_UnlinkBeatFromBeatsGroup_FullMethodName = "/structure.BeatToBeatsGroupService/UnlinkBeatFromBeatsGroup"
)

// BeatToBeatsGroupServiceClient is the client API for BeatToBeatsGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BeatToBeatsGroupServiceClient interface {
	// Retrieve the ids of the beats related to a given beats group.
	GetBeatsGroupBeats(ctx context.Context, in *GetBeatsGroupBeatsRequest, opts ...grpc.CallOption) (*GetBeatsGroupBeatsResponse, error)
	// Retrieve the list of groups a beat is linked to.
	GetBeatBeatsGroups(ctx context.Context, in *GetBeatBeatsGroupsRequest, opts ...grpc.CallOption) (*GetBeatBeatsGroupsResponse, error)
	// Link a beat to a beats group.
	LinkBeatToBeatsGroup(ctx context.Context, in *LinkBeatToBeatsGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Unlink a beat from a beats group.
	UnlinkBeatFromBeatsGroup(ctx context.Context, in *UnlinkBeatFromBeatsGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type beatToBeatsGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBeatToBeatsGroupServiceClient(cc grpc.ClientConnInterface) BeatToBeatsGroupServiceClient {
	return &beatToBeatsGroupServiceClient{cc}
}

func (c *beatToBeatsGroupServiceClient) GetBeatsGroupBeats(ctx context.Context, in *GetBeatsGroupBeatsRequest, opts ...grpc.CallOption) (*GetBeatsGroupBeatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBeatsGroupBeatsResponse)
	err := c.cc.Invoke(ctx, BeatToBeatsGroupService_GetBeatsGroupBeats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beatToBeatsGroupServiceClient) GetBeatBeatsGroups(ctx context.Context, in *GetBeatBeatsGroupsRequest, opts ...grpc.CallOption) (*GetBeatBeatsGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBeatBeatsGroupsResponse)
	err := c.cc.Invoke(ctx, BeatToBeatsGroupService_GetBeatBeatsGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beatToBeatsGroupServiceClient) LinkBeatToBeatsGroup(ctx context.Context, in *LinkBeatToBeatsGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BeatToBeatsGroupService_LinkBeatToBeatsGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beatToBeatsGroupServiceClient) UnlinkBeatFromBeatsGroup(ctx context.Context, in *UnlinkBeatFromBeatsGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BeatToBeatsGroupService_UnlinkBeatFromBeatsGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeatToBeatsGroupServiceServer is the server API for BeatToBeatsGroupService service.
// All implementations must embed UnimplementedBeatToBeatsGroupServiceServer
// for forward compatibility.
type BeatToBeatsGroupServiceServer interface {
	// Retrieve the ids of the beats related to a given beats group.
	GetBeatsGroupBeats(context.Context, *GetBeatsGroupBeatsRequest) (*GetBeatsGroupBeatsResponse, error)
	// Retrieve the list of groups a beat is linked to.
	GetBeatBeatsGroups(context.Context, *GetBeatBeatsGroupsRequest) (*GetBeatBeatsGroupsResponse, error)
	// Link a beat to a beats group.
	LinkBeatToBeatsGroup(context.Context, *LinkBeatToBeatsGroupRequest) (*emptypb.Empty, error)
	// Unlink a beat from a beats group.
	UnlinkBeatFromBeatsGroup(context.Context, *UnlinkBeatFromBeatsGroupRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBeatToBeatsGroupServiceServer()
}

// UnimplementedBeatToBeatsGroupServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBeatToBeatsGroupServiceServer struct{}

func (UnimplementedBeatToBeatsGroupServiceServer) GetBeatsGroupBeats(context.Context, *GetBeatsGroupBeatsRequest) (*GetBeatsGroupBeatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeatsGroupBeats not implemented")
}
func (UnimplementedBeatToBeatsGroupServiceServer) GetBeatBeatsGroups(context.Context, *GetBeatBeatsGroupsRequest) (*GetBeatBeatsGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeatBeatsGroups not implemented")
}
func (UnimplementedBeatToBeatsGroupServiceServer) LinkBeatToBeatsGroup(context.Context, *LinkBeatToBeatsGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkBeatToBeatsGroup not implemented")
}
func (UnimplementedBeatToBeatsGroupServiceServer) UnlinkBeatFromBeatsGroup(context.Context, *UnlinkBeatFromBeatsGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkBeatFromBeatsGroup not implemented")
}
func (UnimplementedBeatToBeatsGroupServiceServer) mustEmbedUnimplementedBeatToBeatsGroupServiceServer() {
}
func (UnimplementedBeatToBeatsGroupServiceServer) testEmbeddedByValue() {}

// UnsafeBeatToBeatsGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BeatToBeatsGroupServiceServer will
// result in compilation errors.
type UnsafeBeatToBeatsGroupServiceServer interface {
	mustEmbedUnimplementedBeatToBeatsGroupServiceServer()
}

func RegisterBeatToBeatsGroupServiceServer(s grpc.ServiceRegistrar, srv BeatToBeatsGroupServiceServer) {
	// If the following call pancis, it indicates UnimplementedBeatToBeatsGroupServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BeatToBeatsGroupService_ServiceDesc, srv)
}

func _BeatToBeatsGroupService_GetBeatsGroupBeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBeatsGroupBeatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeatToBeatsGroupServiceServer).GetBeatsGroupBeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeatToBeatsGroupService_GetBeatsGroupBeats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeatToBeatsGroupServiceServer).GetBeatsGroupBeats(ctx, req.(*GetBeatsGroupBeatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeatToBeatsGroupService_GetBeatBeatsGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBeatBeatsGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeatToBeatsGroupServiceServer).GetBeatBeatsGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeatToBeatsGroupService_GetBeatBeatsGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeatToBeatsGroupServiceServer).GetBeatBeatsGroups(ctx, req.(*GetBeatBeatsGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeatToBeatsGroupService_LinkBeatToBeatsGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkBeatToBeatsGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeatToBeatsGroupServiceServer).LinkBeatToBeatsGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeatToBeatsGroupService_LinkBeatToBeatsGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeatToBeatsGroupServiceServer).LinkBeatToBeatsGroup(ctx, req.(*LinkBeatToBeatsGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeatToBeatsGroupService_UnlinkBeatFromBeatsGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlinkBeatFromBeatsGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeatToBeatsGroupServiceServer).UnlinkBeatFromBeatsGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeatToBeatsGroupService_UnlinkBeatFromBeatsGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeatToBeatsGroupServiceServer).UnlinkBeatFromBeatsGroup(ctx, req.(*UnlinkBeatFromBeatsGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BeatToBeatsGroupService_ServiceDesc is the grpc.ServiceDesc for BeatToBeatsGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BeatToBeatsGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "structure.BeatToBeatsGroupService",
	HandlerType: (*BeatToBeatsGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBeatsGroupBeats",
			Handler:    _BeatToBeatsGroupService_GetBeatsGroupBeats_Handler,
		},
		{
			MethodName: "GetBeatBeatsGroups",
			Handler:    _BeatToBeatsGroupService_GetBeatBeatsGroups_Handler,
		},
		{
			MethodName: "LinkBeatToBeatsGroup",
			Handler:    _BeatToBeatsGroupService_LinkBeatToBeatsGroup_Handler,
		},
		{
			MethodName: "UnlinkBeatFromBeatsGroup",
			Handler:    _BeatToBeatsGroupService_UnlinkBeatFromBeatsGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/story-structure/stc_beat_to_beats_group.proto",
}
