// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/story-structure/stc_plot_point.proto

package storystructurepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PlotPointService_GetPlotPoint_FullMethodName     = "/structure.PlotPointService/GetPlotPoint"
	PlotPointService_ListPlotPoints_FullMethodName   = "/structure.PlotPointService/ListPlotPoints"
	PlotPointService_SearchPlotPoints_FullMethodName = "/structure.PlotPointService/SearchPlotPoints"
	PlotPointService_CreatePlotPoint_FullMethodName  = "/structure.PlotPointService/CreatePlotPoint"
	PlotPointService_UpdatePlotPoint_FullMethodName  = "/structure.PlotPointService/UpdatePlotPoint"
	PlotPointService_DeletePlotPoint_FullMethodName  = "/structure.PlotPointService/DeletePlotPoint"
)

// PlotPointServiceClient is the client API for PlotPointService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlotPointServiceClient interface {
	// Get a specific plot point details.
	GetPlotPoint(ctx context.Context, in *GetPlotPointRequest, opts ...grpc.CallOption) (*PlotPoint, error)
	// Return a list of plot points, based on a list of IDs provided.
	ListPlotPoints(ctx context.Context, in *ListPlotPointsRequest, opts ...grpc.CallOption) (*ListPlotPointsResponse, error)
	// Return a list of plot points ids, based on a search query. You can then use ListPlotPoints to retrieve
	// the specific details of each plot point.
	SearchPlotPoints(ctx context.Context, in *SearchPlotPointsRequest, opts ...grpc.CallOption) (*SearchPlotPointsResponse, error)
	// Create a new plot point.
	CreatePlotPoint(ctx context.Context, in *CreatePlotPointRequest, opts ...grpc.CallOption) (*PlotPoint, error)
	// Update an existing plot point.
	UpdatePlotPoint(ctx context.Context, in *UpdatePlotPointRequest, opts ...grpc.CallOption) (*PlotPoint, error)
	// Delete an existing plot point. This method should not fail if the plot point does not exist.
	DeletePlotPoint(ctx context.Context, in *DeletePlotPointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type plotPointServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlotPointServiceClient(cc grpc.ClientConnInterface) PlotPointServiceClient {
	return &plotPointServiceClient{cc}
}

func (c *plotPointServiceClient) GetPlotPoint(ctx context.Context, in *GetPlotPointRequest, opts ...grpc.CallOption) (*PlotPoint, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlotPoint)
	err := c.cc.Invoke(ctx, PlotPointService_GetPlotPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plotPointServiceClient) ListPlotPoints(ctx context.Context, in *ListPlotPointsRequest, opts ...grpc.CallOption) (*ListPlotPointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPlotPointsResponse)
	err := c.cc.Invoke(ctx, PlotPointService_ListPlotPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plotPointServiceClient) SearchPlotPoints(ctx context.Context, in *SearchPlotPointsRequest, opts ...grpc.CallOption) (*SearchPlotPointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchPlotPointsResponse)
	err := c.cc.Invoke(ctx, PlotPointService_SearchPlotPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plotPointServiceClient) CreatePlotPoint(ctx context.Context, in *CreatePlotPointRequest, opts ...grpc.CallOption) (*PlotPoint, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlotPoint)
	err := c.cc.Invoke(ctx, PlotPointService_CreatePlotPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plotPointServiceClient) UpdatePlotPoint(ctx context.Context, in *UpdatePlotPointRequest, opts ...grpc.CallOption) (*PlotPoint, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlotPoint)
	err := c.cc.Invoke(ctx, PlotPointService_UpdatePlotPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plotPointServiceClient) DeletePlotPoint(ctx context.Context, in *DeletePlotPointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PlotPointService_DeletePlotPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlotPointServiceServer is the server API for PlotPointService service.
// All implementations must embed UnimplementedPlotPointServiceServer
// for forward compatibility.
type PlotPointServiceServer interface {
	// Get a specific plot point details.
	GetPlotPoint(context.Context, *GetPlotPointRequest) (*PlotPoint, error)
	// Return a list of plot points, based on a list of IDs provided.
	ListPlotPoints(context.Context, *ListPlotPointsRequest) (*ListPlotPointsResponse, error)
	// Return a list of plot points ids, based on a search query. You can then use ListPlotPoints to retrieve
	// the specific details of each plot point.
	SearchPlotPoints(context.Context, *SearchPlotPointsRequest) (*SearchPlotPointsResponse, error)
	// Create a new plot point.
	CreatePlotPoint(context.Context, *CreatePlotPointRequest) (*PlotPoint, error)
	// Update an existing plot point.
	UpdatePlotPoint(context.Context, *UpdatePlotPointRequest) (*PlotPoint, error)
	// Delete an existing plot point. This method should not fail if the plot point does not exist.
	DeletePlotPoint(context.Context, *DeletePlotPointRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPlotPointServiceServer()
}

// UnimplementedPlotPointServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlotPointServiceServer struct{}

func (UnimplementedPlotPointServiceServer) GetPlotPoint(context.Context, *GetPlotPointRequest) (*PlotPoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlotPoint not implemented")
}
func (UnimplementedPlotPointServiceServer) ListPlotPoints(context.Context, *ListPlotPointsRequest) (*ListPlotPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlotPoints not implemented")
}
func (UnimplementedPlotPointServiceServer) SearchPlotPoints(context.Context, *SearchPlotPointsRequest) (*SearchPlotPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPlotPoints not implemented")
}
func (UnimplementedPlotPointServiceServer) CreatePlotPoint(context.Context, *CreatePlotPointRequest) (*PlotPoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlotPoint not implemented")
}
func (UnimplementedPlotPointServiceServer) UpdatePlotPoint(context.Context, *UpdatePlotPointRequest) (*PlotPoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlotPoint not implemented")
}
func (UnimplementedPlotPointServiceServer) DeletePlotPoint(context.Context, *DeletePlotPointRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlotPoint not implemented")
}
func (UnimplementedPlotPointServiceServer) mustEmbedUnimplementedPlotPointServiceServer() {}
func (UnimplementedPlotPointServiceServer) testEmbeddedByValue()                          {}

// UnsafePlotPointServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlotPointServiceServer will
// result in compilation errors.
type UnsafePlotPointServiceServer interface {
	mustEmbedUnimplementedPlotPointServiceServer()
}

func RegisterPlotPointServiceServer(s grpc.ServiceRegistrar, srv PlotPointServiceServer) {
	// If the following call pancis, it indicates UnimplementedPlotPointServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PlotPointService_ServiceDesc, srv)
}

func _PlotPointService_GetPlotPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlotPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlotPointServiceServer).GetPlotPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlotPointService_GetPlotPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlotPointServiceServer).GetPlotPoint(ctx, req.(*GetPlotPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlotPointService_ListPlotPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlotPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlotPointServiceServer).ListPlotPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlotPointService_ListPlotPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlotPointServiceServer).ListPlotPoints(ctx, req.(*ListPlotPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlotPointService_SearchPlotPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPlotPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlotPointServiceServer).SearchPlotPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlotPointService_SearchPlotPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlotPointServiceServer).SearchPlotPoints(ctx, req.(*SearchPlotPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlotPointService_CreatePlotPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlotPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlotPointServiceServer).CreatePlotPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlotPointService_CreatePlotPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlotPointServiceServer).CreatePlotPoint(ctx, req.(*CreatePlotPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlotPointService_UpdatePlotPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlotPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlotPointServiceServer).UpdatePlotPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlotPointService_UpdatePlotPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlotPointServiceServer).UpdatePlotPoint(ctx, req.(*UpdatePlotPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlotPointService_DeletePlotPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlotPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlotPointServiceServer).DeletePlotPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlotPointService_DeletePlotPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlotPointServiceServer).DeletePlotPoint(ctx, req.(*DeletePlotPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlotPointService_ServiceDesc is the grpc.ServiceDesc for PlotPointService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlotPointService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "structure.PlotPointService",
	HandlerType: (*PlotPointServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlotPoint",
			Handler:    _PlotPointService_GetPlotPoint_Handler,
		},
		{
			MethodName: "ListPlotPoints",
			Handler:    _PlotPointService_ListPlotPoints_Handler,
		},
		{
			MethodName: "SearchPlotPoints",
			Handler:    _PlotPointService_SearchPlotPoints_Handler,
		},
		{
			MethodName: "CreatePlotPoint",
			Handler:    _PlotPointService_CreatePlotPoint_Handler,
		},
		{
			MethodName: "UpdatePlotPoint",
			Handler:    _PlotPointService_UpdatePlotPoint_Handler,
		},
		{
			MethodName: "DeletePlotPoint",
			Handler:    _PlotPointService_DeletePlotPoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/story-structure/stc_plot_point.proto",
}
