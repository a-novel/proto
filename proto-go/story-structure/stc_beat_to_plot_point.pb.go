// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: proto/story-structure/stc_beat_to_plot_point.proto

package storystructurepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetPlotPointBeatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the plot point to retrieve the beats from.
	PlotPointId string `protobuf:"bytes,1,opt,name=plot_point_id,json=plotPointId,proto3" json:"plot_point_id,omitempty"`
}

func (x *GetPlotPointBeatsRequest) Reset() {
	*x = GetPlotPointBeatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_story_structure_stc_beat_to_plot_point_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlotPointBeatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlotPointBeatsRequest) ProtoMessage() {}

func (x *GetPlotPointBeatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_story_structure_stc_beat_to_plot_point_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlotPointBeatsRequest.ProtoReflect.Descriptor instead.
func (*GetPlotPointBeatsRequest) Descriptor() ([]byte, []int) {
	return file_proto_story_structure_stc_beat_to_plot_point_proto_rawDescGZIP(), []int{0}
}

func (x *GetPlotPointBeatsRequest) GetPlotPointId() string {
	if x != nil {
		return x.PlotPointId
	}
	return ""
}

type GetBeatPlotPointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the beat to retrieve the plot points from.
	BeatId string `protobuf:"bytes,1,opt,name=beat_id,json=beatId,proto3" json:"beat_id,omitempty"`
}

func (x *GetBeatPlotPointsRequest) Reset() {
	*x = GetBeatPlotPointsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_story_structure_stc_beat_to_plot_point_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBeatPlotPointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBeatPlotPointsRequest) ProtoMessage() {}

func (x *GetBeatPlotPointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_story_structure_stc_beat_to_plot_point_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBeatPlotPointsRequest.ProtoReflect.Descriptor instead.
func (*GetBeatPlotPointsRequest) Descriptor() ([]byte, []int) {
	return file_proto_story_structure_stc_beat_to_plot_point_proto_rawDescGZIP(), []int{1}
}

func (x *GetBeatPlotPointsRequest) GetBeatId() string {
	if x != nil {
		return x.BeatId
	}
	return ""
}

type LinkPlotPointToBeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the beat to link to the plot point.
	BeatId string `protobuf:"bytes,1,opt,name=beat_id,json=beatId,proto3" json:"beat_id,omitempty"`
	// The id of the plot point to link the beat to.
	PlotPointId string `protobuf:"bytes,2,opt,name=plot_point_id,json=plotPointId,proto3" json:"plot_point_id,omitempty"`
}

func (x *LinkPlotPointToBeatRequest) Reset() {
	*x = LinkPlotPointToBeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_story_structure_stc_beat_to_plot_point_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkPlotPointToBeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkPlotPointToBeatRequest) ProtoMessage() {}

func (x *LinkPlotPointToBeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_story_structure_stc_beat_to_plot_point_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkPlotPointToBeatRequest.ProtoReflect.Descriptor instead.
func (*LinkPlotPointToBeatRequest) Descriptor() ([]byte, []int) {
	return file_proto_story_structure_stc_beat_to_plot_point_proto_rawDescGZIP(), []int{2}
}

func (x *LinkPlotPointToBeatRequest) GetBeatId() string {
	if x != nil {
		return x.BeatId
	}
	return ""
}

func (x *LinkPlotPointToBeatRequest) GetPlotPointId() string {
	if x != nil {
		return x.PlotPointId
	}
	return ""
}

type UnlinkPlotPointFromBeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the beat to unlink from the plot point.
	BeatId string `protobuf:"bytes,1,opt,name=beat_id,json=beatId,proto3" json:"beat_id,omitempty"`
	// The id of the plot point to unlink the beat from.
	PlotPointId string `protobuf:"bytes,2,opt,name=plot_point_id,json=plotPointId,proto3" json:"plot_point_id,omitempty"`
}

func (x *UnlinkPlotPointFromBeatRequest) Reset() {
	*x = UnlinkPlotPointFromBeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_story_structure_stc_beat_to_plot_point_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlinkPlotPointFromBeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlinkPlotPointFromBeatRequest) ProtoMessage() {}

func (x *UnlinkPlotPointFromBeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_story_structure_stc_beat_to_plot_point_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlinkPlotPointFromBeatRequest.ProtoReflect.Descriptor instead.
func (*UnlinkPlotPointFromBeatRequest) Descriptor() ([]byte, []int) {
	return file_proto_story_structure_stc_beat_to_plot_point_proto_rawDescGZIP(), []int{3}
}

func (x *UnlinkPlotPointFromBeatRequest) GetBeatId() string {
	if x != nil {
		return x.BeatId
	}
	return ""
}

func (x *UnlinkPlotPointFromBeatRequest) GetPlotPointId() string {
	if x != nil {
		return x.PlotPointId
	}
	return ""
}

type GetPlotPointBeatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ids of the beats related to the plot point.
	BeatIds []string `protobuf:"bytes,1,rep,name=beat_ids,json=beatIds,proto3" json:"beat_ids,omitempty"`
}

func (x *GetPlotPointBeatsResponse) Reset() {
	*x = GetPlotPointBeatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_story_structure_stc_beat_to_plot_point_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlotPointBeatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlotPointBeatsResponse) ProtoMessage() {}

func (x *GetPlotPointBeatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_story_structure_stc_beat_to_plot_point_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlotPointBeatsResponse.ProtoReflect.Descriptor instead.
func (*GetPlotPointBeatsResponse) Descriptor() ([]byte, []int) {
	return file_proto_story_structure_stc_beat_to_plot_point_proto_rawDescGZIP(), []int{4}
}

func (x *GetPlotPointBeatsResponse) GetBeatIds() []string {
	if x != nil {
		return x.BeatIds
	}
	return nil
}

type GetBeatPlotPointsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ids of the plot points the beat is linked to.
	PlotPointIds []string `protobuf:"bytes,1,rep,name=plot_point_ids,json=plotPointIds,proto3" json:"plot_point_ids,omitempty"`
}

func (x *GetBeatPlotPointsResponse) Reset() {
	*x = GetBeatPlotPointsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_story_structure_stc_beat_to_plot_point_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBeatPlotPointsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBeatPlotPointsResponse) ProtoMessage() {}

func (x *GetBeatPlotPointsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_story_structure_stc_beat_to_plot_point_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBeatPlotPointsResponse.ProtoReflect.Descriptor instead.
func (*GetBeatPlotPointsResponse) Descriptor() ([]byte, []int) {
	return file_proto_story_structure_stc_beat_to_plot_point_proto_rawDescGZIP(), []int{5}
}

func (x *GetBeatPlotPointsResponse) GetPlotPointIds() []string {
	if x != nil {
		return x.PlotPointIds
	}
	return nil
}

var File_proto_story_structure_stc_beat_to_plot_point_proto protoreflect.FileDescriptor

var file_proto_story_structure_stc_beat_to_plot_point_proto_rawDesc = []byte{
	0x0a, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x73, 0x74, 0x63, 0x5f, 0x62, 0x65, 0x61, 0x74,
	0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6c, 0x6f, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3e, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6c, 0x6f, 0x74,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x65, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x65, 0x61, 0x74, 0x49,
	0x64, 0x22, 0x59, 0x0a, 0x1a, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x54, 0x6f, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6c, 0x6f, 0x74,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x1e,
	0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x46,
	0x72, 0x6f, 0x6d, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6c, 0x6f, 0x74, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x65, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x62, 0x65, 0x61, 0x74,
	0x49, 0x64, 0x73, 0x22, 0x41, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x50, 0x6c,
	0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6c, 0x6f, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x6f, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x32, 0x94, 0x03, 0x0a, 0x16, 0x42, 0x65, 0x61, 0x74, 0x54,
	0x6f, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x60, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x42, 0x65, 0x61, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42,
	0x65, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x6f, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x50, 0x6c,
	0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x50, 0x6c, 0x6f, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61,
	0x74, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x13, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x6c, 0x6f,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x42, 0x65, 0x61, 0x74, 0x12, 0x25, 0x2e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x6c, 0x6f,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a,
	0x17, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x46, 0x72, 0x6f, 0x6d, 0x42, 0x65, 0x61, 0x74, 0x12, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x6c, 0x6f, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x2b, 0x5a,
	0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2d,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x3b, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_story_structure_stc_beat_to_plot_point_proto_rawDescOnce sync.Once
	file_proto_story_structure_stc_beat_to_plot_point_proto_rawDescData = file_proto_story_structure_stc_beat_to_plot_point_proto_rawDesc
)

func file_proto_story_structure_stc_beat_to_plot_point_proto_rawDescGZIP() []byte {
	file_proto_story_structure_stc_beat_to_plot_point_proto_rawDescOnce.Do(func() {
		file_proto_story_structure_stc_beat_to_plot_point_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_story_structure_stc_beat_to_plot_point_proto_rawDescData)
	})
	return file_proto_story_structure_stc_beat_to_plot_point_proto_rawDescData
}

var file_proto_story_structure_stc_beat_to_plot_point_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_story_structure_stc_beat_to_plot_point_proto_goTypes = []any{
	(*GetPlotPointBeatsRequest)(nil),       // 0: structure.GetPlotPointBeatsRequest
	(*GetBeatPlotPointsRequest)(nil),       // 1: structure.GetBeatPlotPointsRequest
	(*LinkPlotPointToBeatRequest)(nil),     // 2: structure.LinkPlotPointToBeatRequest
	(*UnlinkPlotPointFromBeatRequest)(nil), // 3: structure.UnlinkPlotPointFromBeatRequest
	(*GetPlotPointBeatsResponse)(nil),      // 4: structure.GetPlotPointBeatsResponse
	(*GetBeatPlotPointsResponse)(nil),      // 5: structure.GetBeatPlotPointsResponse
	(*emptypb.Empty)(nil),                  // 6: google.protobuf.Empty
}
var file_proto_story_structure_stc_beat_to_plot_point_proto_depIdxs = []int32{
	0, // 0: structure.BeatToPlotPointService.GetPlotPointBeats:input_type -> structure.GetPlotPointBeatsRequest
	1, // 1: structure.BeatToPlotPointService.GetBeatPlotPoints:input_type -> structure.GetBeatPlotPointsRequest
	2, // 2: structure.BeatToPlotPointService.LinkPlotPointToBeat:input_type -> structure.LinkPlotPointToBeatRequest
	3, // 3: structure.BeatToPlotPointService.UnlinkPlotPointFromBeat:input_type -> structure.UnlinkPlotPointFromBeatRequest
	4, // 4: structure.BeatToPlotPointService.GetPlotPointBeats:output_type -> structure.GetPlotPointBeatsResponse
	5, // 5: structure.BeatToPlotPointService.GetBeatPlotPoints:output_type -> structure.GetBeatPlotPointsResponse
	6, // 6: structure.BeatToPlotPointService.LinkPlotPointToBeat:output_type -> google.protobuf.Empty
	6, // 7: structure.BeatToPlotPointService.UnlinkPlotPointFromBeat:output_type -> google.protobuf.Empty
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_story_structure_stc_beat_to_plot_point_proto_init() }
func file_proto_story_structure_stc_beat_to_plot_point_proto_init() {
	if File_proto_story_structure_stc_beat_to_plot_point_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_story_structure_stc_beat_to_plot_point_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetPlotPointBeatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_story_structure_stc_beat_to_plot_point_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetBeatPlotPointsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_story_structure_stc_beat_to_plot_point_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*LinkPlotPointToBeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_story_structure_stc_beat_to_plot_point_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UnlinkPlotPointFromBeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_story_structure_stc_beat_to_plot_point_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetPlotPointBeatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_story_structure_stc_beat_to_plot_point_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetBeatPlotPointsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_story_structure_stc_beat_to_plot_point_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_story_structure_stc_beat_to_plot_point_proto_goTypes,
		DependencyIndexes: file_proto_story_structure_stc_beat_to_plot_point_proto_depIdxs,
		MessageInfos:      file_proto_story_structure_stc_beat_to_plot_point_proto_msgTypes,
	}.Build()
	File_proto_story_structure_stc_beat_to_plot_point_proto = out.File
	file_proto_story_structure_stc_beat_to_plot_point_proto_rawDesc = nil
	file_proto_story_structure_stc_beat_to_plot_point_proto_goTypes = nil
	file_proto_story_structure_stc_beat_to_plot_point_proto_depIdxs = nil
}
