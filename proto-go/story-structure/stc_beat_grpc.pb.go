// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/story-structure/stc_beat.proto

package storystructurepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BeatService_GetBeat_FullMethodName     = "/structure.BeatService/GetBeat"
	BeatService_ListBeats_FullMethodName   = "/structure.BeatService/ListBeats"
	BeatService_SearchBeats_FullMethodName = "/structure.BeatService/SearchBeats"
	BeatService_CreateBeat_FullMethodName  = "/structure.BeatService/CreateBeat"
	BeatService_UpdateBeat_FullMethodName  = "/structure.BeatService/UpdateBeat"
	BeatService_DeleteBeat_FullMethodName  = "/structure.BeatService/DeleteBeat"
)

// BeatServiceClient is the client API for BeatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BeatServiceClient interface {
	// Get a specific beat details.
	GetBeat(ctx context.Context, in *GetBeatRequest, opts ...grpc.CallOption) (*Beat, error)
	// Return a list of beats, based on a list of IDs provided.
	ListBeats(ctx context.Context, in *ListBeatsRequest, opts ...grpc.CallOption) (*ListBeatsResponse, error)
	// Return a list of beat ids, based on a search query. You can then use ListBeats to retrieve
	// the specific details of each beat.
	SearchBeats(ctx context.Context, in *SearchBeatsRequest, opts ...grpc.CallOption) (*SearchBeatsResponse, error)
	// Create a new beat.
	CreateBeat(ctx context.Context, in *CreateBeatRequest, opts ...grpc.CallOption) (*Beat, error)
	// Update an existing beat.
	UpdateBeat(ctx context.Context, in *UpdateBeatRequest, opts ...grpc.CallOption) (*Beat, error)
	// Delete an existing beat. This method should not fail if the beat does not exist.
	DeleteBeat(ctx context.Context, in *DeleteBeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type beatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBeatServiceClient(cc grpc.ClientConnInterface) BeatServiceClient {
	return &beatServiceClient{cc}
}

func (c *beatServiceClient) GetBeat(ctx context.Context, in *GetBeatRequest, opts ...grpc.CallOption) (*Beat, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Beat)
	err := c.cc.Invoke(ctx, BeatService_GetBeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beatServiceClient) ListBeats(ctx context.Context, in *ListBeatsRequest, opts ...grpc.CallOption) (*ListBeatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBeatsResponse)
	err := c.cc.Invoke(ctx, BeatService_ListBeats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beatServiceClient) SearchBeats(ctx context.Context, in *SearchBeatsRequest, opts ...grpc.CallOption) (*SearchBeatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchBeatsResponse)
	err := c.cc.Invoke(ctx, BeatService_SearchBeats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beatServiceClient) CreateBeat(ctx context.Context, in *CreateBeatRequest, opts ...grpc.CallOption) (*Beat, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Beat)
	err := c.cc.Invoke(ctx, BeatService_CreateBeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beatServiceClient) UpdateBeat(ctx context.Context, in *UpdateBeatRequest, opts ...grpc.CallOption) (*Beat, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Beat)
	err := c.cc.Invoke(ctx, BeatService_UpdateBeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beatServiceClient) DeleteBeat(ctx context.Context, in *DeleteBeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BeatService_DeleteBeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeatServiceServer is the server API for BeatService service.
// All implementations must embed UnimplementedBeatServiceServer
// for forward compatibility.
type BeatServiceServer interface {
	// Get a specific beat details.
	GetBeat(context.Context, *GetBeatRequest) (*Beat, error)
	// Return a list of beats, based on a list of IDs provided.
	ListBeats(context.Context, *ListBeatsRequest) (*ListBeatsResponse, error)
	// Return a list of beat ids, based on a search query. You can then use ListBeats to retrieve
	// the specific details of each beat.
	SearchBeats(context.Context, *SearchBeatsRequest) (*SearchBeatsResponse, error)
	// Create a new beat.
	CreateBeat(context.Context, *CreateBeatRequest) (*Beat, error)
	// Update an existing beat.
	UpdateBeat(context.Context, *UpdateBeatRequest) (*Beat, error)
	// Delete an existing beat. This method should not fail if the beat does not exist.
	DeleteBeat(context.Context, *DeleteBeatRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBeatServiceServer()
}

// UnimplementedBeatServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBeatServiceServer struct{}

func (UnimplementedBeatServiceServer) GetBeat(context.Context, *GetBeatRequest) (*Beat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeat not implemented")
}
func (UnimplementedBeatServiceServer) ListBeats(context.Context, *ListBeatsRequest) (*ListBeatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBeats not implemented")
}
func (UnimplementedBeatServiceServer) SearchBeats(context.Context, *SearchBeatsRequest) (*SearchBeatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBeats not implemented")
}
func (UnimplementedBeatServiceServer) CreateBeat(context.Context, *CreateBeatRequest) (*Beat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBeat not implemented")
}
func (UnimplementedBeatServiceServer) UpdateBeat(context.Context, *UpdateBeatRequest) (*Beat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBeat not implemented")
}
func (UnimplementedBeatServiceServer) DeleteBeat(context.Context, *DeleteBeatRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBeat not implemented")
}
func (UnimplementedBeatServiceServer) mustEmbedUnimplementedBeatServiceServer() {}
func (UnimplementedBeatServiceServer) testEmbeddedByValue()                     {}

// UnsafeBeatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BeatServiceServer will
// result in compilation errors.
type UnsafeBeatServiceServer interface {
	mustEmbedUnimplementedBeatServiceServer()
}

func RegisterBeatServiceServer(s grpc.ServiceRegistrar, srv BeatServiceServer) {
	// If the following call pancis, it indicates UnimplementedBeatServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BeatService_ServiceDesc, srv)
}

func _BeatService_GetBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeatServiceServer).GetBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeatService_GetBeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeatServiceServer).GetBeat(ctx, req.(*GetBeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeatService_ListBeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBeatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeatServiceServer).ListBeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeatService_ListBeats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeatServiceServer).ListBeats(ctx, req.(*ListBeatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeatService_SearchBeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBeatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeatServiceServer).SearchBeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeatService_SearchBeats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeatServiceServer).SearchBeats(ctx, req.(*SearchBeatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeatService_CreateBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeatServiceServer).CreateBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeatService_CreateBeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeatServiceServer).CreateBeat(ctx, req.(*CreateBeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeatService_UpdateBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeatServiceServer).UpdateBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeatService_UpdateBeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeatServiceServer).UpdateBeat(ctx, req.(*UpdateBeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeatService_DeleteBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeatServiceServer).DeleteBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeatService_DeleteBeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeatServiceServer).DeleteBeat(ctx, req.(*DeleteBeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BeatService_ServiceDesc is the grpc.ServiceDesc for BeatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BeatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "structure.BeatService",
	HandlerType: (*BeatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBeat",
			Handler:    _BeatService_GetBeat_Handler,
		},
		{
			MethodName: "ListBeats",
			Handler:    _BeatService_ListBeats_Handler,
		},
		{
			MethodName: "SearchBeats",
			Handler:    _BeatService_SearchBeats_Handler,
		},
		{
			MethodName: "CreateBeat",
			Handler:    _BeatService_CreateBeat_Handler,
		},
		{
			MethodName: "UpdateBeat",
			Handler:    _BeatService_UpdateBeat_Handler,
		},
		{
			MethodName: "DeleteBeat",
			Handler:    _BeatService_DeleteBeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/story-structure/stc_beat.proto",
}
