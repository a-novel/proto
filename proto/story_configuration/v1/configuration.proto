syntax = "proto3";

package story_configuration.v1;

import "google/protobuf/empty.proto";

option go_package = "github.com/a-novel/proto/gen/go/story_configuration/v1;storyconfigurationpb";

service ConfigurationService {
  // Get a specific configuration details.
  rpc GetConfiguration(GetConfigurationRequest) returns (GetConfigurationResponse) {}
  // Return a list of configurations, based on a list of IDs provided.
  rpc ListConfigurations(ListConfigurationsRequest) returns (ListConfigurationsResponse) {}
  // Return a list of configuration ids, based on a search query. You can then use ListConfigurations to retrieve
  // the specific details of each configuration.
  rpc SearchConfigurations(SearchConfigurationsRequest) returns (SearchConfigurationsResponse) {}

  // Create a new configuration.
  rpc CreateConfiguration(CreateConfigurationRequest) returns (CreateConfigurationResponse) {}
  // Update an existing configuration.
  rpc UpdateConfiguration(UpdateConfigurationRequest) returns (UpdateConfigurationResponse) {}
  // Delete an existing configuration. This method should not fail if the configuration does not exist.
  rpc DeleteConfiguration(DeleteConfigurationRequest) returns (google.protobuf.Empty) {}
}

// ================================================================================
// REQUESTS
// ================================================================================

message GetConfigurationRequest {
  // The id of the configuration to retrieve.
  string id = 1;
}

message ListConfigurationsRequest {
  // The ids of the configurations to retrieve. A maximum number of ids that can be provided in one request may be
  // defined by the server.
  repeated string ids = 1;
}

message SearchConfigurationsRequest {
  // Batch size for the search. The server may cap this value.
  int32 limit = 1;
  // Offset for the search. The server may cap this value.
  int32 offset = 2;
}

message CreateConfigurationRequest {
  // The name of the configuration to create. While not required to be unique, it is recommended to be, so it is not
  // confused with other configurations.
  string name = 1;
  // The ordered list of plot points selected for the current configuration.
  repeated PlotPointConfiguration plot_points = 2;
}

message UpdateConfigurationRequest {
  // The ID of the existing configuration to update.
  string id = 1;
  // The name of the configuration to create. While not required to be unique, it is recommended to be, so it is not
  // confused with other configurations.
  string name = 2;
  // The ordered list of plot points selected for the current configuration.
  repeated PlotPointConfiguration plot_points = 3;
}

message DeleteConfigurationRequest {
  // The ID of the configuration to delete.
  string id = 1;
}

// ================================================================================
// RESPONSES
// ================================================================================

message GetConfigurationResponse {
  // The configuration that was retrieved.
  Configuration configuration = 1;
}

message ListConfigurationsResponse {
  // The configurations that were retrieved.
  repeated Configuration configurations = 1;
}

message SearchConfigurationsResponse {
  // A list of configuration ids, that matches the provided search query. The number of returned configuration ids may
  // be less than the number of provided IDs, if some of them are incorrect / don't point to an existing configuration.
  repeated string configuration_ids = 1;
}

message CreateConfigurationResponse {
  // The configuration that was created.
  Configuration configuration = 1;
}

message UpdateConfigurationResponse {
  // The configuration that was updated.
  Configuration configuration = 1;
}

// ================================================================================
// GENERIC
// ================================================================================

message Configuration {
  // The unique identifier of the configuration.
  string id = 1;
  // The display name of the configuration.
  string name = 2;
  // The ordered list of plot points selected for the current configuration.
  repeated PlotPointConfiguration plot_points = 3;
}

message PlotPointConfiguration {
  // The unique identifier of the related plot point.
  string id = 1;
  // The list of beats selected for the current plot point.
  repeated string beats_ids = 2;
}
