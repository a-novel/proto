// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: story_structure/v1/stc_beat.proto

package storystructurepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetBeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the beat to retrieve.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBeatRequest) Reset() {
	*x = GetBeatRequest{}
	mi := &file_story_structure_v1_stc_beat_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBeatRequest) ProtoMessage() {}

func (x *GetBeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_beat_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBeatRequest.ProtoReflect.Descriptor instead.
func (*GetBeatRequest) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_beat_proto_rawDescGZIP(), []int{0}
}

func (x *GetBeatRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListBeatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ids of the beats to retrieve. A maximum number of ids that can be provided in one request may be
	// defined by the server.
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ListBeatsRequest) Reset() {
	*x = ListBeatsRequest{}
	mi := &file_story_structure_v1_stc_beat_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBeatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBeatsRequest) ProtoMessage() {}

func (x *ListBeatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_beat_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBeatsRequest.ProtoReflect.Descriptor instead.
func (*ListBeatsRequest) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_beat_proto_rawDescGZIP(), []int{1}
}

func (x *ListBeatsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type SearchBeatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Batch size for the search. The server may cap this value.
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Offset for the search. The server may cap this value.
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *SearchBeatsRequest) Reset() {
	*x = SearchBeatsRequest{}
	mi := &file_story_structure_v1_stc_beat_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchBeatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchBeatsRequest) ProtoMessage() {}

func (x *SearchBeatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_beat_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchBeatsRequest.ProtoReflect.Descriptor instead.
func (*SearchBeatsRequest) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_beat_proto_rawDescGZIP(), []int{2}
}

func (x *SearchBeatsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchBeatsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type CreateBeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the beat to create. While not required to be unique, it is recommended to be, so it is not
	// confused with other beats.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The main prompt that should be used to generate a story with this beat.
	Prompt string `protobuf:"bytes,2,opt,name=prompt,proto3" json:"prompt,omitempty"`
}

func (x *CreateBeatRequest) Reset() {
	*x = CreateBeatRequest{}
	mi := &file_story_structure_v1_stc_beat_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBeatRequest) ProtoMessage() {}

func (x *CreateBeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_beat_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBeatRequest.ProtoReflect.Descriptor instead.
func (*CreateBeatRequest) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_beat_proto_rawDescGZIP(), []int{3}
}

func (x *CreateBeatRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateBeatRequest) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

type UpdateBeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the existing beat to update.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the beat to create. While not required to be unique, it is recommended to be, so it is not
	// confused with other beats.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The main prompt that should be used to generate a story with this beat.
	Prompt string `protobuf:"bytes,3,opt,name=prompt,proto3" json:"prompt,omitempty"`
}

func (x *UpdateBeatRequest) Reset() {
	*x = UpdateBeatRequest{}
	mi := &file_story_structure_v1_stc_beat_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBeatRequest) ProtoMessage() {}

func (x *UpdateBeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_beat_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBeatRequest.ProtoReflect.Descriptor instead.
func (*UpdateBeatRequest) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_beat_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateBeatRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateBeatRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateBeatRequest) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

type DeleteBeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the beat to delete.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteBeatRequest) Reset() {
	*x = DeleteBeatRequest{}
	mi := &file_story_structure_v1_stc_beat_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteBeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBeatRequest) ProtoMessage() {}

func (x *DeleteBeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_beat_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBeatRequest.ProtoReflect.Descriptor instead.
func (*DeleteBeatRequest) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_beat_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteBeatRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetBeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The beat that was retrieved.
	Beat *Beat `protobuf:"bytes,1,opt,name=beat,proto3" json:"beat,omitempty"`
}

func (x *GetBeatResponse) Reset() {
	*x = GetBeatResponse{}
	mi := &file_story_structure_v1_stc_beat_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBeatResponse) ProtoMessage() {}

func (x *GetBeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_beat_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBeatResponse.ProtoReflect.Descriptor instead.
func (*GetBeatResponse) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_beat_proto_rawDescGZIP(), []int{6}
}

func (x *GetBeatResponse) GetBeat() *Beat {
	if x != nil {
		return x.Beat
	}
	return nil
}

type ListBeatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The beats that were retrieved.
	Beats []*Beat `protobuf:"bytes,1,rep,name=beats,proto3" json:"beats,omitempty"`
}

func (x *ListBeatsResponse) Reset() {
	*x = ListBeatsResponse{}
	mi := &file_story_structure_v1_stc_beat_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBeatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBeatsResponse) ProtoMessage() {}

func (x *ListBeatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_beat_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBeatsResponse.ProtoReflect.Descriptor instead.
func (*ListBeatsResponse) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_beat_proto_rawDescGZIP(), []int{7}
}

func (x *ListBeatsResponse) GetBeats() []*Beat {
	if x != nil {
		return x.Beats
	}
	return nil
}

type SearchBeatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ids of the beats matching the search. Details for each beat can be retrieved using ListBeats,
	// or separately using GetBeat.
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *SearchBeatsResponse) Reset() {
	*x = SearchBeatsResponse{}
	mi := &file_story_structure_v1_stc_beat_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchBeatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchBeatsResponse) ProtoMessage() {}

func (x *SearchBeatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_beat_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchBeatsResponse.ProtoReflect.Descriptor instead.
func (*SearchBeatsResponse) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_beat_proto_rawDescGZIP(), []int{8}
}

func (x *SearchBeatsResponse) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type CreateBeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The beat that was created.
	Beat *Beat `protobuf:"bytes,1,opt,name=beat,proto3" json:"beat,omitempty"`
}

func (x *CreateBeatResponse) Reset() {
	*x = CreateBeatResponse{}
	mi := &file_story_structure_v1_stc_beat_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBeatResponse) ProtoMessage() {}

func (x *CreateBeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_beat_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBeatResponse.ProtoReflect.Descriptor instead.
func (*CreateBeatResponse) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_beat_proto_rawDescGZIP(), []int{9}
}

func (x *CreateBeatResponse) GetBeat() *Beat {
	if x != nil {
		return x.Beat
	}
	return nil
}

type UpdateBeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The beat that was updated.
	Beat *Beat `protobuf:"bytes,1,opt,name=beat,proto3" json:"beat,omitempty"`
}

func (x *UpdateBeatResponse) Reset() {
	*x = UpdateBeatResponse{}
	mi := &file_story_structure_v1_stc_beat_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBeatResponse) ProtoMessage() {}

func (x *UpdateBeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_beat_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBeatResponse.ProtoReflect.Descriptor instead.
func (*UpdateBeatResponse) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_beat_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateBeatResponse) GetBeat() *Beat {
	if x != nil {
		return x.Beat
	}
	return nil
}

type Beat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the beat.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// THe display name of the beat.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The prompt that should be used to generate a story with this beat.
	Prompt string `protobuf:"bytes,3,opt,name=prompt,proto3" json:"prompt,omitempty"`
}

func (x *Beat) Reset() {
	*x = Beat{}
	mi := &file_story_structure_v1_stc_beat_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Beat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Beat) ProtoMessage() {}

func (x *Beat) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_beat_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Beat.ProtoReflect.Descriptor instead.
func (*Beat) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_beat_proto_rawDescGZIP(), []int{11}
}

func (x *Beat) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Beat) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Beat) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

var File_story_structure_v1_stc_beat_proto protoreflect.FileDescriptor

var file_story_structure_v1_stc_beat_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x63, 0x5f, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x42, 0x0a, 0x12,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x65, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x22, 0x3f, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x22, 0x4f, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x22, 0x23, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x65, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x62, 0x65,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65,
	0x61, 0x74, 0x52, 0x04, 0x62, 0x65, 0x61, 0x74, 0x22, 0x43, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x65, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x05, 0x62, 0x65, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x65, 0x61, 0x74, 0x52, 0x05, 0x62, 0x65, 0x61, 0x74, 0x73, 0x22, 0x27, 0x0a,
	0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x65, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x42, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04,
	0x62, 0x65, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x65, 0x61, 0x74, 0x52, 0x04, 0x62, 0x65, 0x61, 0x74, 0x22, 0x42, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x04, 0x62, 0x65, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x61, 0x74, 0x52, 0x04, 0x62, 0x65, 0x61, 0x74, 0x22, 0x42,
	0x0a, 0x04, 0x42, 0x65, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x32, 0xae, 0x04, 0x0a, 0x0b, 0x42, 0x65, 0x61, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x22, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x65, 0x61, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x65, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x65,
	0x61, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42,
	0x65, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x65, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x65, 0x61, 0x74, 0x12, 0x25, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x65, 0x61, 0x74, 0x12, 0x25, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x65,
	0x61, 0x74, 0x12, 0x25, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x42, 0x45, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x2d, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_story_structure_v1_stc_beat_proto_rawDescOnce sync.Once
	file_story_structure_v1_stc_beat_proto_rawDescData = file_story_structure_v1_stc_beat_proto_rawDesc
)

func file_story_structure_v1_stc_beat_proto_rawDescGZIP() []byte {
	file_story_structure_v1_stc_beat_proto_rawDescOnce.Do(func() {
		file_story_structure_v1_stc_beat_proto_rawDescData = protoimpl.X.CompressGZIP(file_story_structure_v1_stc_beat_proto_rawDescData)
	})
	return file_story_structure_v1_stc_beat_proto_rawDescData
}

var file_story_structure_v1_stc_beat_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_story_structure_v1_stc_beat_proto_goTypes = []any{
	(*GetBeatRequest)(nil),      // 0: story_structure.v1.GetBeatRequest
	(*ListBeatsRequest)(nil),    // 1: story_structure.v1.ListBeatsRequest
	(*SearchBeatsRequest)(nil),  // 2: story_structure.v1.SearchBeatsRequest
	(*CreateBeatRequest)(nil),   // 3: story_structure.v1.CreateBeatRequest
	(*UpdateBeatRequest)(nil),   // 4: story_structure.v1.UpdateBeatRequest
	(*DeleteBeatRequest)(nil),   // 5: story_structure.v1.DeleteBeatRequest
	(*GetBeatResponse)(nil),     // 6: story_structure.v1.GetBeatResponse
	(*ListBeatsResponse)(nil),   // 7: story_structure.v1.ListBeatsResponse
	(*SearchBeatsResponse)(nil), // 8: story_structure.v1.SearchBeatsResponse
	(*CreateBeatResponse)(nil),  // 9: story_structure.v1.CreateBeatResponse
	(*UpdateBeatResponse)(nil),  // 10: story_structure.v1.UpdateBeatResponse
	(*Beat)(nil),                // 11: story_structure.v1.Beat
	(*emptypb.Empty)(nil),       // 12: google.protobuf.Empty
}
var file_story_structure_v1_stc_beat_proto_depIdxs = []int32{
	11, // 0: story_structure.v1.GetBeatResponse.beat:type_name -> story_structure.v1.Beat
	11, // 1: story_structure.v1.ListBeatsResponse.beats:type_name -> story_structure.v1.Beat
	11, // 2: story_structure.v1.CreateBeatResponse.beat:type_name -> story_structure.v1.Beat
	11, // 3: story_structure.v1.UpdateBeatResponse.beat:type_name -> story_structure.v1.Beat
	0,  // 4: story_structure.v1.BeatService.GetBeat:input_type -> story_structure.v1.GetBeatRequest
	1,  // 5: story_structure.v1.BeatService.ListBeats:input_type -> story_structure.v1.ListBeatsRequest
	2,  // 6: story_structure.v1.BeatService.SearchBeats:input_type -> story_structure.v1.SearchBeatsRequest
	3,  // 7: story_structure.v1.BeatService.CreateBeat:input_type -> story_structure.v1.CreateBeatRequest
	4,  // 8: story_structure.v1.BeatService.UpdateBeat:input_type -> story_structure.v1.UpdateBeatRequest
	5,  // 9: story_structure.v1.BeatService.DeleteBeat:input_type -> story_structure.v1.DeleteBeatRequest
	6,  // 10: story_structure.v1.BeatService.GetBeat:output_type -> story_structure.v1.GetBeatResponse
	7,  // 11: story_structure.v1.BeatService.ListBeats:output_type -> story_structure.v1.ListBeatsResponse
	8,  // 12: story_structure.v1.BeatService.SearchBeats:output_type -> story_structure.v1.SearchBeatsResponse
	9,  // 13: story_structure.v1.BeatService.CreateBeat:output_type -> story_structure.v1.CreateBeatResponse
	10, // 14: story_structure.v1.BeatService.UpdateBeat:output_type -> story_structure.v1.UpdateBeatResponse
	12, // 15: story_structure.v1.BeatService.DeleteBeat:output_type -> google.protobuf.Empty
	10, // [10:16] is the sub-list for method output_type
	4,  // [4:10] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_story_structure_v1_stc_beat_proto_init() }
func file_story_structure_v1_stc_beat_proto_init() {
	if File_story_structure_v1_stc_beat_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_story_structure_v1_stc_beat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_story_structure_v1_stc_beat_proto_goTypes,
		DependencyIndexes: file_story_structure_v1_stc_beat_proto_depIdxs,
		MessageInfos:      file_story_structure_v1_stc_beat_proto_msgTypes,
	}.Build()
	File_story_structure_v1_stc_beat_proto = out.File
	file_story_structure_v1_stc_beat_proto_rawDesc = nil
	file_story_structure_v1_stc_beat_proto_goTypes = nil
	file_story_structure_v1_stc_beat_proto_depIdxs = nil
}
