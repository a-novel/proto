// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: story_structure/v1/stc_plot_point.proto

package storystructurepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetPlotPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the plot point to retrieve.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPlotPointRequest) Reset() {
	*x = GetPlotPointRequest{}
	mi := &file_story_structure_v1_stc_plot_point_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlotPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlotPointRequest) ProtoMessage() {}

func (x *GetPlotPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_plot_point_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlotPointRequest.ProtoReflect.Descriptor instead.
func (*GetPlotPointRequest) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_plot_point_proto_rawDescGZIP(), []int{0}
}

func (x *GetPlotPointRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListPlotPointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ids of the plot points to retrieve. A maximum number of ids that can be provided in one request may be
	// defined by the server.
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ListPlotPointsRequest) Reset() {
	*x = ListPlotPointsRequest{}
	mi := &file_story_structure_v1_stc_plot_point_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPlotPointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlotPointsRequest) ProtoMessage() {}

func (x *ListPlotPointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_plot_point_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlotPointsRequest.ProtoReflect.Descriptor instead.
func (*ListPlotPointsRequest) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_plot_point_proto_rawDescGZIP(), []int{1}
}

func (x *ListPlotPointsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type SearchPlotPointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Batch size for the search. The server may cap this value.
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Offset for the search. The server may cap this value.
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *SearchPlotPointsRequest) Reset() {
	*x = SearchPlotPointsRequest{}
	mi := &file_story_structure_v1_stc_plot_point_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchPlotPointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPlotPointsRequest) ProtoMessage() {}

func (x *SearchPlotPointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_plot_point_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPlotPointsRequest.ProtoReflect.Descriptor instead.
func (*SearchPlotPointsRequest) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_plot_point_proto_rawDescGZIP(), []int{2}
}

func (x *SearchPlotPointsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchPlotPointsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type CreatePlotPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the plot point to create. While not required to be unique, it is recommended to be, so it is not
	// confused with other plot points.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The main prompt that should be used to generate a story with this plot point.
	Prompt string `protobuf:"bytes,2,opt,name=prompt,proto3" json:"prompt,omitempty"`
}

func (x *CreatePlotPointRequest) Reset() {
	*x = CreatePlotPointRequest{}
	mi := &file_story_structure_v1_stc_plot_point_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePlotPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlotPointRequest) ProtoMessage() {}

func (x *CreatePlotPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_plot_point_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlotPointRequest.ProtoReflect.Descriptor instead.
func (*CreatePlotPointRequest) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_plot_point_proto_rawDescGZIP(), []int{3}
}

func (x *CreatePlotPointRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePlotPointRequest) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

type UpdatePlotPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the existing plot point to update.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the plot point to create. While not required to be unique, it is recommended to be, so it is not
	// confused with other plot points.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The main prompt that should be used to generate a story with this plot point.
	Prompt string `protobuf:"bytes,3,opt,name=prompt,proto3" json:"prompt,omitempty"`
}

func (x *UpdatePlotPointRequest) Reset() {
	*x = UpdatePlotPointRequest{}
	mi := &file_story_structure_v1_stc_plot_point_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePlotPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlotPointRequest) ProtoMessage() {}

func (x *UpdatePlotPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_plot_point_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlotPointRequest.ProtoReflect.Descriptor instead.
func (*UpdatePlotPointRequest) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_plot_point_proto_rawDescGZIP(), []int{4}
}

func (x *UpdatePlotPointRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdatePlotPointRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePlotPointRequest) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

type DeletePlotPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the plot point to delete.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeletePlotPointRequest) Reset() {
	*x = DeletePlotPointRequest{}
	mi := &file_story_structure_v1_stc_plot_point_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePlotPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlotPointRequest) ProtoMessage() {}

func (x *DeletePlotPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_plot_point_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlotPointRequest.ProtoReflect.Descriptor instead.
func (*DeletePlotPointRequest) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_plot_point_proto_rawDescGZIP(), []int{5}
}

func (x *DeletePlotPointRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetPlotPointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The plot point that was retrieved.
	PlotPoint *PlotPoint `protobuf:"bytes,1,opt,name=plot_point,json=plotPoint,proto3" json:"plot_point,omitempty"`
}

func (x *GetPlotPointResponse) Reset() {
	*x = GetPlotPointResponse{}
	mi := &file_story_structure_v1_stc_plot_point_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlotPointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlotPointResponse) ProtoMessage() {}

func (x *GetPlotPointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_plot_point_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlotPointResponse.ProtoReflect.Descriptor instead.
func (*GetPlotPointResponse) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_plot_point_proto_rawDescGZIP(), []int{6}
}

func (x *GetPlotPointResponse) GetPlotPoint() *PlotPoint {
	if x != nil {
		return x.PlotPoint
	}
	return nil
}

type ListPlotPointsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of plot points, that matches the provided IDs. The number of returned plot points may be less than the
	// number of provided IDs, if some of them are incorrect / don't point to an existing plot point.
	PlotPoints []*PlotPoint `protobuf:"bytes,1,rep,name=plot_points,json=plotPoints,proto3" json:"plot_points,omitempty"`
}

func (x *ListPlotPointsResponse) Reset() {
	*x = ListPlotPointsResponse{}
	mi := &file_story_structure_v1_stc_plot_point_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPlotPointsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlotPointsResponse) ProtoMessage() {}

func (x *ListPlotPointsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_plot_point_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlotPointsResponse.ProtoReflect.Descriptor instead.
func (*ListPlotPointsResponse) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_plot_point_proto_rawDescGZIP(), []int{7}
}

func (x *ListPlotPointsResponse) GetPlotPoints() []*PlotPoint {
	if x != nil {
		return x.PlotPoints
	}
	return nil
}

type SearchPlotPointsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ids of the plot points matching the search. Details for each plot point can be retrieved using ListPlotPoints,
	// or separately using GetPlotPoint.
	PlotPointsIds []string `protobuf:"bytes,1,rep,name=plot_points_ids,json=plotPointsIds,proto3" json:"plot_points_ids,omitempty"`
}

func (x *SearchPlotPointsResponse) Reset() {
	*x = SearchPlotPointsResponse{}
	mi := &file_story_structure_v1_stc_plot_point_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchPlotPointsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPlotPointsResponse) ProtoMessage() {}

func (x *SearchPlotPointsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_plot_point_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPlotPointsResponse.ProtoReflect.Descriptor instead.
func (*SearchPlotPointsResponse) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_plot_point_proto_rawDescGZIP(), []int{8}
}

func (x *SearchPlotPointsResponse) GetPlotPointsIds() []string {
	if x != nil {
		return x.PlotPointsIds
	}
	return nil
}

type CreatePlotPointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the newly created plot point.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreatePlotPointResponse) Reset() {
	*x = CreatePlotPointResponse{}
	mi := &file_story_structure_v1_stc_plot_point_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePlotPointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlotPointResponse) ProtoMessage() {}

func (x *CreatePlotPointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_plot_point_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlotPointResponse.ProtoReflect.Descriptor instead.
func (*CreatePlotPointResponse) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_plot_point_proto_rawDescGZIP(), []int{9}
}

func (x *CreatePlotPointResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdatePlotPointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the updated plot point.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UpdatePlotPointResponse) Reset() {
	*x = UpdatePlotPointResponse{}
	mi := &file_story_structure_v1_stc_plot_point_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePlotPointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlotPointResponse) ProtoMessage() {}

func (x *UpdatePlotPointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_plot_point_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlotPointResponse.ProtoReflect.Descriptor instead.
func (*UpdatePlotPointResponse) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_plot_point_proto_rawDescGZIP(), []int{10}
}

func (x *UpdatePlotPointResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PlotPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the plot point.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The display name of the plot point. It is not required to be unique.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The main prompt that should be used to generate a story with this plot point.
	Prompt string `protobuf:"bytes,3,opt,name=prompt,proto3" json:"prompt,omitempty"`
}

func (x *PlotPoint) Reset() {
	*x = PlotPoint{}
	mi := &file_story_structure_v1_stc_plot_point_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlotPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlotPoint) ProtoMessage() {}

func (x *PlotPoint) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_plot_point_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlotPoint.ProtoReflect.Descriptor instead.
func (*PlotPoint) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_plot_point_proto_rawDescGZIP(), []int{11}
}

func (x *PlotPoint) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlotPoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlotPoint) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

var File_story_structure_v1_stc_plot_point_proto protoreflect.FileDescriptor

var file_story_structure_v1_stc_plot_point_proto_rawDesc = []byte{
	0x0a, 0x27, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x63, 0x5f, 0x70, 0x6c, 0x6f, 0x74, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x25, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x29, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x47, 0x0a, 0x17,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x44, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x22, 0x54, 0x0a, 0x16, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x22, 0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x6f, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x54, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x6c, 0x6f, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6f,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x70, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x22, 0x58, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x70,
	0x6c, 0x6f, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x0a, 0x70, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x42, 0x0a, 0x18, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6c, 0x6f, 0x74, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x64, 0x73, 0x22,
	0x29, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x17, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x47, 0x0a, 0x09, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x32, 0x88,
	0x05, 0x0a, 0x10, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x6f, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x6f,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c,
	0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x6f, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x6f,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x57, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x45, 0x5a, 0x43, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x2d, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x3b,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_story_structure_v1_stc_plot_point_proto_rawDescOnce sync.Once
	file_story_structure_v1_stc_plot_point_proto_rawDescData = file_story_structure_v1_stc_plot_point_proto_rawDesc
)

func file_story_structure_v1_stc_plot_point_proto_rawDescGZIP() []byte {
	file_story_structure_v1_stc_plot_point_proto_rawDescOnce.Do(func() {
		file_story_structure_v1_stc_plot_point_proto_rawDescData = protoimpl.X.CompressGZIP(file_story_structure_v1_stc_plot_point_proto_rawDescData)
	})
	return file_story_structure_v1_stc_plot_point_proto_rawDescData
}

var file_story_structure_v1_stc_plot_point_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_story_structure_v1_stc_plot_point_proto_goTypes = []any{
	(*GetPlotPointRequest)(nil),      // 0: story_structure.v1.GetPlotPointRequest
	(*ListPlotPointsRequest)(nil),    // 1: story_structure.v1.ListPlotPointsRequest
	(*SearchPlotPointsRequest)(nil),  // 2: story_structure.v1.SearchPlotPointsRequest
	(*CreatePlotPointRequest)(nil),   // 3: story_structure.v1.CreatePlotPointRequest
	(*UpdatePlotPointRequest)(nil),   // 4: story_structure.v1.UpdatePlotPointRequest
	(*DeletePlotPointRequest)(nil),   // 5: story_structure.v1.DeletePlotPointRequest
	(*GetPlotPointResponse)(nil),     // 6: story_structure.v1.GetPlotPointResponse
	(*ListPlotPointsResponse)(nil),   // 7: story_structure.v1.ListPlotPointsResponse
	(*SearchPlotPointsResponse)(nil), // 8: story_structure.v1.SearchPlotPointsResponse
	(*CreatePlotPointResponse)(nil),  // 9: story_structure.v1.CreatePlotPointResponse
	(*UpdatePlotPointResponse)(nil),  // 10: story_structure.v1.UpdatePlotPointResponse
	(*PlotPoint)(nil),                // 11: story_structure.v1.PlotPoint
	(*emptypb.Empty)(nil),            // 12: google.protobuf.Empty
}
var file_story_structure_v1_stc_plot_point_proto_depIdxs = []int32{
	11, // 0: story_structure.v1.GetPlotPointResponse.plot_point:type_name -> story_structure.v1.PlotPoint
	11, // 1: story_structure.v1.ListPlotPointsResponse.plot_points:type_name -> story_structure.v1.PlotPoint
	0,  // 2: story_structure.v1.PlotPointService.GetPlotPoint:input_type -> story_structure.v1.GetPlotPointRequest
	1,  // 3: story_structure.v1.PlotPointService.ListPlotPoints:input_type -> story_structure.v1.ListPlotPointsRequest
	2,  // 4: story_structure.v1.PlotPointService.SearchPlotPoints:input_type -> story_structure.v1.SearchPlotPointsRequest
	3,  // 5: story_structure.v1.PlotPointService.CreatePlotPoint:input_type -> story_structure.v1.CreatePlotPointRequest
	4,  // 6: story_structure.v1.PlotPointService.UpdatePlotPoint:input_type -> story_structure.v1.UpdatePlotPointRequest
	5,  // 7: story_structure.v1.PlotPointService.DeletePlotPoint:input_type -> story_structure.v1.DeletePlotPointRequest
	6,  // 8: story_structure.v1.PlotPointService.GetPlotPoint:output_type -> story_structure.v1.GetPlotPointResponse
	7,  // 9: story_structure.v1.PlotPointService.ListPlotPoints:output_type -> story_structure.v1.ListPlotPointsResponse
	8,  // 10: story_structure.v1.PlotPointService.SearchPlotPoints:output_type -> story_structure.v1.SearchPlotPointsResponse
	9,  // 11: story_structure.v1.PlotPointService.CreatePlotPoint:output_type -> story_structure.v1.CreatePlotPointResponse
	10, // 12: story_structure.v1.PlotPointService.UpdatePlotPoint:output_type -> story_structure.v1.UpdatePlotPointResponse
	12, // 13: story_structure.v1.PlotPointService.DeletePlotPoint:output_type -> google.protobuf.Empty
	8,  // [8:14] is the sub-list for method output_type
	2,  // [2:8] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_story_structure_v1_stc_plot_point_proto_init() }
func file_story_structure_v1_stc_plot_point_proto_init() {
	if File_story_structure_v1_stc_plot_point_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_story_structure_v1_stc_plot_point_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_story_structure_v1_stc_plot_point_proto_goTypes,
		DependencyIndexes: file_story_structure_v1_stc_plot_point_proto_depIdxs,
		MessageInfos:      file_story_structure_v1_stc_plot_point_proto_msgTypes,
	}.Build()
	File_story_structure_v1_stc_plot_point_proto = out.File
	file_story_structure_v1_stc_plot_point_proto_rawDesc = nil
	file_story_structure_v1_stc_plot_point_proto_goTypes = nil
	file_story_structure_v1_stc_plot_point_proto_depIdxs = nil
}
