// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: story_structure/v1/stc_beat_to_plot_point.proto

package storystructurepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListBeatsByPlotPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the plot point to retrieve the beats from.
	PlotPointId string `protobuf:"bytes,1,opt,name=plot_point_id,json=plotPointId,proto3" json:"plot_point_id,omitempty"`
}

func (x *ListBeatsByPlotPointRequest) Reset() {
	*x = ListBeatsByPlotPointRequest{}
	mi := &file_story_structure_v1_stc_beat_to_plot_point_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBeatsByPlotPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBeatsByPlotPointRequest) ProtoMessage() {}

func (x *ListBeatsByPlotPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_beat_to_plot_point_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBeatsByPlotPointRequest.ProtoReflect.Descriptor instead.
func (*ListBeatsByPlotPointRequest) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_beat_to_plot_point_proto_rawDescGZIP(), []int{0}
}

func (x *ListBeatsByPlotPointRequest) GetPlotPointId() string {
	if x != nil {
		return x.PlotPointId
	}
	return ""
}

type ListPlotPointsByBeatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the beat to retrieve the plot points from.
	BeatId string `protobuf:"bytes,1,opt,name=beat_id,json=beatId,proto3" json:"beat_id,omitempty"`
}

func (x *ListPlotPointsByBeatsRequest) Reset() {
	*x = ListPlotPointsByBeatsRequest{}
	mi := &file_story_structure_v1_stc_beat_to_plot_point_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPlotPointsByBeatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlotPointsByBeatsRequest) ProtoMessage() {}

func (x *ListPlotPointsByBeatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_beat_to_plot_point_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlotPointsByBeatsRequest.ProtoReflect.Descriptor instead.
func (*ListPlotPointsByBeatsRequest) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_beat_to_plot_point_proto_rawDescGZIP(), []int{1}
}

func (x *ListPlotPointsByBeatsRequest) GetBeatId() string {
	if x != nil {
		return x.BeatId
	}
	return ""
}

type LinkBeatAndPlotPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the beat to link to the plot point.
	BeatId string `protobuf:"bytes,1,opt,name=beat_id,json=beatId,proto3" json:"beat_id,omitempty"`
	// The id of the plot point to link the beat to.
	PlotPointId string `protobuf:"bytes,2,opt,name=plot_point_id,json=plotPointId,proto3" json:"plot_point_id,omitempty"`
}

func (x *LinkBeatAndPlotPointRequest) Reset() {
	*x = LinkBeatAndPlotPointRequest{}
	mi := &file_story_structure_v1_stc_beat_to_plot_point_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkBeatAndPlotPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkBeatAndPlotPointRequest) ProtoMessage() {}

func (x *LinkBeatAndPlotPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_beat_to_plot_point_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkBeatAndPlotPointRequest.ProtoReflect.Descriptor instead.
func (*LinkBeatAndPlotPointRequest) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_beat_to_plot_point_proto_rawDescGZIP(), []int{2}
}

func (x *LinkBeatAndPlotPointRequest) GetBeatId() string {
	if x != nil {
		return x.BeatId
	}
	return ""
}

func (x *LinkBeatAndPlotPointRequest) GetPlotPointId() string {
	if x != nil {
		return x.PlotPointId
	}
	return ""
}

type UnlinkBeatAndPlotPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the beat to unlink from the plot point.
	BeatId string `protobuf:"bytes,1,opt,name=beat_id,json=beatId,proto3" json:"beat_id,omitempty"`
	// The id of the plot point to unlink the beat from.
	PlotPointId string `protobuf:"bytes,2,opt,name=plot_point_id,json=plotPointId,proto3" json:"plot_point_id,omitempty"`
}

func (x *UnlinkBeatAndPlotPointRequest) Reset() {
	*x = UnlinkBeatAndPlotPointRequest{}
	mi := &file_story_structure_v1_stc_beat_to_plot_point_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnlinkBeatAndPlotPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlinkBeatAndPlotPointRequest) ProtoMessage() {}

func (x *UnlinkBeatAndPlotPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_beat_to_plot_point_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlinkBeatAndPlotPointRequest.ProtoReflect.Descriptor instead.
func (*UnlinkBeatAndPlotPointRequest) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_beat_to_plot_point_proto_rawDescGZIP(), []int{3}
}

func (x *UnlinkBeatAndPlotPointRequest) GetBeatId() string {
	if x != nil {
		return x.BeatId
	}
	return ""
}

func (x *UnlinkBeatAndPlotPointRequest) GetPlotPointId() string {
	if x != nil {
		return x.PlotPointId
	}
	return ""
}

type ListBeatsByPlotPointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ids of the beats related to the plot point.
	BeatIds []string `protobuf:"bytes,1,rep,name=beat_ids,json=beatIds,proto3" json:"beat_ids,omitempty"`
}

func (x *ListBeatsByPlotPointResponse) Reset() {
	*x = ListBeatsByPlotPointResponse{}
	mi := &file_story_structure_v1_stc_beat_to_plot_point_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBeatsByPlotPointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBeatsByPlotPointResponse) ProtoMessage() {}

func (x *ListBeatsByPlotPointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_beat_to_plot_point_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBeatsByPlotPointResponse.ProtoReflect.Descriptor instead.
func (*ListBeatsByPlotPointResponse) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_beat_to_plot_point_proto_rawDescGZIP(), []int{4}
}

func (x *ListBeatsByPlotPointResponse) GetBeatIds() []string {
	if x != nil {
		return x.BeatIds
	}
	return nil
}

type ListPlotPointsByBeatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ids of the plot points the beat is linked to.
	PlotPointIds []string `protobuf:"bytes,1,rep,name=plot_point_ids,json=plotPointIds,proto3" json:"plot_point_ids,omitempty"`
}

func (x *ListPlotPointsByBeatsResponse) Reset() {
	*x = ListPlotPointsByBeatsResponse{}
	mi := &file_story_structure_v1_stc_beat_to_plot_point_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPlotPointsByBeatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlotPointsByBeatsResponse) ProtoMessage() {}

func (x *ListPlotPointsByBeatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_story_structure_v1_stc_beat_to_plot_point_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlotPointsByBeatsResponse.ProtoReflect.Descriptor instead.
func (*ListPlotPointsByBeatsResponse) Descriptor() ([]byte, []int) {
	return file_story_structure_v1_stc_beat_to_plot_point_proto_rawDescGZIP(), []int{5}
}

func (x *ListPlotPointsByBeatsResponse) GetPlotPointIds() []string {
	if x != nil {
		return x.PlotPointIds
	}
	return nil
}

var File_story_structure_v1_stc_beat_to_plot_point_proto protoreflect.FileDescriptor

var file_story_structure_v1_stc_beat_to_plot_point_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x63, 0x5f, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x6f,
	0x5f, 0x70, 0x6c, 0x6f, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x41, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x61, 0x74, 0x73, 0x42,
	0x79, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6c, 0x6f, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x6f, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x6f,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x42, 0x65, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x65, 0x61, 0x74, 0x49, 0x64, 0x22, 0x5a,
	0x0a, 0x1b, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x65, 0x61, 0x74, 0x41, 0x6e, 0x64, 0x50, 0x6c, 0x6f,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6c, 0x6f, 0x74, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x1d, 0x55, 0x6e,
	0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x65, 0x61, 0x74, 0x41, 0x6e, 0x64, 0x50, 0x6c, 0x6f, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x62,
	0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x65,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6c, 0x6f, 0x74, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x6f,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x65, 0x61, 0x74, 0x73, 0x42, 0x79, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x65, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x62, 0x65, 0x61, 0x74,
	0x49, 0x64, 0x73, 0x22, 0x45, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x6f, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x42, 0x65, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6c, 0x6f, 0x74, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c,
	0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x32, 0xdf, 0x03, 0x0a, 0x16, 0x42,
	0x65, 0x61, 0x74, 0x54, 0x6f, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7b, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x61,
	0x74, 0x73, 0x42, 0x79, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2f, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x61, 0x74, 0x73, 0x42, 0x79, 0x50, 0x6c,
	0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x61, 0x74, 0x73, 0x42, 0x79, 0x50,
	0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7e, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x42, 0x65, 0x61, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x42,
	0x79, 0x42, 0x65, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x42, 0x79, 0x42, 0x65, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x61, 0x0a, 0x14, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x65, 0x61, 0x74, 0x41, 0x6e,
	0x64, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x65, 0x61, 0x74, 0x41, 0x6e, 0x64, 0x50, 0x6c, 0x6f, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x16, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x42,
	0x65, 0x61, 0x74, 0x41, 0x6e, 0x64, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x31, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x65, 0x61, 0x74, 0x41,
	0x6e, 0x64, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x45, 0x5a, 0x43,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x2d, 0x6e, 0x6f, 0x76,
	0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2f,
	0x76, 0x31, 0x3b, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_story_structure_v1_stc_beat_to_plot_point_proto_rawDescOnce sync.Once
	file_story_structure_v1_stc_beat_to_plot_point_proto_rawDescData = file_story_structure_v1_stc_beat_to_plot_point_proto_rawDesc
)

func file_story_structure_v1_stc_beat_to_plot_point_proto_rawDescGZIP() []byte {
	file_story_structure_v1_stc_beat_to_plot_point_proto_rawDescOnce.Do(func() {
		file_story_structure_v1_stc_beat_to_plot_point_proto_rawDescData = protoimpl.X.CompressGZIP(file_story_structure_v1_stc_beat_to_plot_point_proto_rawDescData)
	})
	return file_story_structure_v1_stc_beat_to_plot_point_proto_rawDescData
}

var file_story_structure_v1_stc_beat_to_plot_point_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_story_structure_v1_stc_beat_to_plot_point_proto_goTypes = []any{
	(*ListBeatsByPlotPointRequest)(nil),   // 0: story_structure.v1.ListBeatsByPlotPointRequest
	(*ListPlotPointsByBeatsRequest)(nil),  // 1: story_structure.v1.ListPlotPointsByBeatsRequest
	(*LinkBeatAndPlotPointRequest)(nil),   // 2: story_structure.v1.LinkBeatAndPlotPointRequest
	(*UnlinkBeatAndPlotPointRequest)(nil), // 3: story_structure.v1.UnlinkBeatAndPlotPointRequest
	(*ListBeatsByPlotPointResponse)(nil),  // 4: story_structure.v1.ListBeatsByPlotPointResponse
	(*ListPlotPointsByBeatsResponse)(nil), // 5: story_structure.v1.ListPlotPointsByBeatsResponse
	(*emptypb.Empty)(nil),                 // 6: google.protobuf.Empty
}
var file_story_structure_v1_stc_beat_to_plot_point_proto_depIdxs = []int32{
	0, // 0: story_structure.v1.BeatToPlotPointService.ListBeatsByPlotPoint:input_type -> story_structure.v1.ListBeatsByPlotPointRequest
	1, // 1: story_structure.v1.BeatToPlotPointService.ListPlotPointsByBeats:input_type -> story_structure.v1.ListPlotPointsByBeatsRequest
	2, // 2: story_structure.v1.BeatToPlotPointService.LinkBeatAndPlotPoint:input_type -> story_structure.v1.LinkBeatAndPlotPointRequest
	3, // 3: story_structure.v1.BeatToPlotPointService.UnlinkBeatAndPlotPoint:input_type -> story_structure.v1.UnlinkBeatAndPlotPointRequest
	4, // 4: story_structure.v1.BeatToPlotPointService.ListBeatsByPlotPoint:output_type -> story_structure.v1.ListBeatsByPlotPointResponse
	5, // 5: story_structure.v1.BeatToPlotPointService.ListPlotPointsByBeats:output_type -> story_structure.v1.ListPlotPointsByBeatsResponse
	6, // 6: story_structure.v1.BeatToPlotPointService.LinkBeatAndPlotPoint:output_type -> google.protobuf.Empty
	6, // 7: story_structure.v1.BeatToPlotPointService.UnlinkBeatAndPlotPoint:output_type -> google.protobuf.Empty
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_story_structure_v1_stc_beat_to_plot_point_proto_init() }
func file_story_structure_v1_stc_beat_to_plot_point_proto_init() {
	if File_story_structure_v1_stc_beat_to_plot_point_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_story_structure_v1_stc_beat_to_plot_point_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_story_structure_v1_stc_beat_to_plot_point_proto_goTypes,
		DependencyIndexes: file_story_structure_v1_stc_beat_to_plot_point_proto_depIdxs,
		MessageInfos:      file_story_structure_v1_stc_beat_to_plot_point_proto_msgTypes,
	}.Build()
	File_story_structure_v1_stc_beat_to_plot_point_proto = out.File
	file_story_structure_v1_stc_beat_to_plot_point_proto_rawDesc = nil
	file_story_structure_v1_stc_beat_to_plot_point_proto_goTypes = nil
	file_story_structure_v1_stc_beat_to_plot_point_proto_depIdxs = nil
}
