// @generated by protoc-gen-es v2.2.0 with parameter "target=js+dts"
// @generated from file story_structure/v1/stc_beat.proto (package story_structure.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { EmptySchema } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file story_structure/v1/stc_beat.proto.
 */
export declare const file_story_structure_v1_stc_beat: GenFile;

/**
 * @generated from message story_structure.v1.GetBeatRequest
 */
export declare type GetBeatRequest = Message<"story_structure.v1.GetBeatRequest"> & {
  /**
   * The id of the beat to retrieve.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message story_structure.v1.GetBeatRequest.
 * Use `create(GetBeatRequestSchema)` to create a new message.
 */
export declare const GetBeatRequestSchema: GenMessage<GetBeatRequest>;

/**
 * @generated from message story_structure.v1.ListBeatsRequest
 */
export declare type ListBeatsRequest = Message<"story_structure.v1.ListBeatsRequest"> & {
  /**
   * The ids of the beats to retrieve. A maximum number of ids that can be provided in one request may be
   * defined by the server.
   *
   * @generated from field: repeated string ids = 1;
   */
  ids: string[];
};

/**
 * Describes the message story_structure.v1.ListBeatsRequest.
 * Use `create(ListBeatsRequestSchema)` to create a new message.
 */
export declare const ListBeatsRequestSchema: GenMessage<ListBeatsRequest>;

/**
 * @generated from message story_structure.v1.SearchBeatsRequest
 */
export declare type SearchBeatsRequest = Message<"story_structure.v1.SearchBeatsRequest"> & {
  /**
   * Batch size for the search. The server may cap this value.
   *
   * @generated from field: int32 limit = 1;
   */
  limit: number;

  /**
   * Offset for the search. The server may cap this value.
   *
   * @generated from field: int32 offset = 2;
   */
  offset: number;
};

/**
 * Describes the message story_structure.v1.SearchBeatsRequest.
 * Use `create(SearchBeatsRequestSchema)` to create a new message.
 */
export declare const SearchBeatsRequestSchema: GenMessage<SearchBeatsRequest>;

/**
 * @generated from message story_structure.v1.CreateBeatRequest
 */
export declare type CreateBeatRequest = Message<"story_structure.v1.CreateBeatRequest"> & {
  /**
   * The name of the beat to create. While not required to be unique, it is recommended to be, so it is not
   * confused with other beats.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The main prompt that should be used to generate a story with this beat.
   *
   * @generated from field: string prompt = 2;
   */
  prompt: string;
};

/**
 * Describes the message story_structure.v1.CreateBeatRequest.
 * Use `create(CreateBeatRequestSchema)` to create a new message.
 */
export declare const CreateBeatRequestSchema: GenMessage<CreateBeatRequest>;

/**
 * @generated from message story_structure.v1.UpdateBeatRequest
 */
export declare type UpdateBeatRequest = Message<"story_structure.v1.UpdateBeatRequest"> & {
  /**
   * The ID of the existing beat to update.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The name of the beat to create. While not required to be unique, it is recommended to be, so it is not
   * confused with other beats.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * The main prompt that should be used to generate a story with this beat.
   *
   * @generated from field: string prompt = 3;
   */
  prompt: string;
};

/**
 * Describes the message story_structure.v1.UpdateBeatRequest.
 * Use `create(UpdateBeatRequestSchema)` to create a new message.
 */
export declare const UpdateBeatRequestSchema: GenMessage<UpdateBeatRequest>;

/**
 * @generated from message story_structure.v1.DeleteBeatRequest
 */
export declare type DeleteBeatRequest = Message<"story_structure.v1.DeleteBeatRequest"> & {
  /**
   * The ID of the beat to delete.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message story_structure.v1.DeleteBeatRequest.
 * Use `create(DeleteBeatRequestSchema)` to create a new message.
 */
export declare const DeleteBeatRequestSchema: GenMessage<DeleteBeatRequest>;

/**
 * @generated from message story_structure.v1.GetBeatResponse
 */
export declare type GetBeatResponse = Message<"story_structure.v1.GetBeatResponse"> & {
  /**
   * The beat that was retrieved.
   *
   * @generated from field: story_structure.v1.Beat beat = 1;
   */
  beat?: Beat;
};

/**
 * Describes the message story_structure.v1.GetBeatResponse.
 * Use `create(GetBeatResponseSchema)` to create a new message.
 */
export declare const GetBeatResponseSchema: GenMessage<GetBeatResponse>;

/**
 * @generated from message story_structure.v1.ListBeatsResponse
 */
export declare type ListBeatsResponse = Message<"story_structure.v1.ListBeatsResponse"> & {
  /**
   * The beats that were retrieved.
   *
   * @generated from field: repeated story_structure.v1.Beat beats = 1;
   */
  beats: Beat[];
};

/**
 * Describes the message story_structure.v1.ListBeatsResponse.
 * Use `create(ListBeatsResponseSchema)` to create a new message.
 */
export declare const ListBeatsResponseSchema: GenMessage<ListBeatsResponse>;

/**
 * @generated from message story_structure.v1.SearchBeatsResponse
 */
export declare type SearchBeatsResponse = Message<"story_structure.v1.SearchBeatsResponse"> & {
  /**
   * The ids of the beats matching the search. Details for each beat can be retrieved using ListBeats,
   * or separately using GetBeat.
   *
   * @generated from field: repeated string ids = 1;
   */
  ids: string[];
};

/**
 * Describes the message story_structure.v1.SearchBeatsResponse.
 * Use `create(SearchBeatsResponseSchema)` to create a new message.
 */
export declare const SearchBeatsResponseSchema: GenMessage<SearchBeatsResponse>;

/**
 * @generated from message story_structure.v1.CreateBeatResponse
 */
export declare type CreateBeatResponse = Message<"story_structure.v1.CreateBeatResponse"> & {
  /**
   * The beat that was created.
   *
   * @generated from field: story_structure.v1.Beat beat = 1;
   */
  beat?: Beat;
};

/**
 * Describes the message story_structure.v1.CreateBeatResponse.
 * Use `create(CreateBeatResponseSchema)` to create a new message.
 */
export declare const CreateBeatResponseSchema: GenMessage<CreateBeatResponse>;

/**
 * @generated from message story_structure.v1.UpdateBeatResponse
 */
export declare type UpdateBeatResponse = Message<"story_structure.v1.UpdateBeatResponse"> & {
  /**
   * The beat that was updated.
   *
   * @generated from field: story_structure.v1.Beat beat = 1;
   */
  beat?: Beat;
};

/**
 * Describes the message story_structure.v1.UpdateBeatResponse.
 * Use `create(UpdateBeatResponseSchema)` to create a new message.
 */
export declare const UpdateBeatResponseSchema: GenMessage<UpdateBeatResponse>;

/**
 * @generated from message story_structure.v1.Beat
 */
export declare type Beat = Message<"story_structure.v1.Beat"> & {
  /**
   * The unique identifier of the beat.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * THe display name of the beat.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * The prompt that should be used to generate a story with this beat.
   *
   * @generated from field: string prompt = 3;
   */
  prompt: string;
};

/**
 * Describes the message story_structure.v1.Beat.
 * Use `create(BeatSchema)` to create a new message.
 */
export declare const BeatSchema: GenMessage<Beat>;

/**
 * @generated from service story_structure.v1.BeatService
 */
export declare const BeatService: GenService<{
  /**
   * Get a specific beat details.
   *
   * @generated from rpc story_structure.v1.BeatService.GetBeat
   */
  getBeat: {
    methodKind: "unary";
    input: typeof GetBeatRequestSchema;
    output: typeof GetBeatResponseSchema;
  },
  /**
   * Return a list of beats, based on a list of IDs provided.
   *
   * @generated from rpc story_structure.v1.BeatService.ListBeats
   */
  listBeats: {
    methodKind: "unary";
    input: typeof ListBeatsRequestSchema;
    output: typeof ListBeatsResponseSchema;
  },
  /**
   * Return a list of beat ids, based on a search query. You can then use ListBeats to retrieve
   * the specific details of each beat.
   *
   * @generated from rpc story_structure.v1.BeatService.SearchBeats
   */
  searchBeats: {
    methodKind: "unary";
    input: typeof SearchBeatsRequestSchema;
    output: typeof SearchBeatsResponseSchema;
  },
  /**
   * Create a new beat.
   *
   * @generated from rpc story_structure.v1.BeatService.CreateBeat
   */
  createBeat: {
    methodKind: "unary";
    input: typeof CreateBeatRequestSchema;
    output: typeof CreateBeatResponseSchema;
  },
  /**
   * Update an existing beat.
   *
   * @generated from rpc story_structure.v1.BeatService.UpdateBeat
   */
  updateBeat: {
    methodKind: "unary";
    input: typeof UpdateBeatRequestSchema;
    output: typeof UpdateBeatResponseSchema;
  },
  /**
   * Delete an existing beat. This method should not fail if the beat does not exist.
   *
   * @generated from rpc story_structure.v1.BeatService.DeleteBeat
   */
  deleteBeat: {
    methodKind: "unary";
    input: typeof DeleteBeatRequestSchema;
    output: typeof EmptySchema;
  },
}>;

