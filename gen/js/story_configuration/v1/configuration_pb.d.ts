// @generated by protoc-gen-es v2.2.0 with parameter "target=js+dts"
// @generated from file story_configuration/v1/configuration.proto (package story_configuration.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { EmptySchema } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file story_configuration/v1/configuration.proto.
 */
export declare const file_story_configuration_v1_configuration: GenFile;

/**
 * @generated from message story_configuration.v1.GetConfigurationRequest
 */
export declare type GetConfigurationRequest = Message<"story_configuration.v1.GetConfigurationRequest"> & {
  /**
   * The id of the configuration to retrieve.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message story_configuration.v1.GetConfigurationRequest.
 * Use `create(GetConfigurationRequestSchema)` to create a new message.
 */
export declare const GetConfigurationRequestSchema: GenMessage<GetConfigurationRequest>;

/**
 * @generated from message story_configuration.v1.ListConfigurationsRequest
 */
export declare type ListConfigurationsRequest = Message<"story_configuration.v1.ListConfigurationsRequest"> & {
  /**
   * The ids of the configurations to retrieve. A maximum number of ids that can be provided in one request may be
   * defined by the server.
   *
   * @generated from field: repeated string ids = 1;
   */
  ids: string[];
};

/**
 * Describes the message story_configuration.v1.ListConfigurationsRequest.
 * Use `create(ListConfigurationsRequestSchema)` to create a new message.
 */
export declare const ListConfigurationsRequestSchema: GenMessage<ListConfigurationsRequest>;

/**
 * @generated from message story_configuration.v1.SearchConfigurationsRequest
 */
export declare type SearchConfigurationsRequest = Message<"story_configuration.v1.SearchConfigurationsRequest"> & {
  /**
   * Batch size for the search. The server may cap this value.
   *
   * @generated from field: int32 limit = 1;
   */
  limit: number;

  /**
   * Offset for the search. The server may cap this value.
   *
   * @generated from field: int32 offset = 2;
   */
  offset: number;
};

/**
 * Describes the message story_configuration.v1.SearchConfigurationsRequest.
 * Use `create(SearchConfigurationsRequestSchema)` to create a new message.
 */
export declare const SearchConfigurationsRequestSchema: GenMessage<SearchConfigurationsRequest>;

/**
 * @generated from message story_configuration.v1.CreateConfigurationRequest
 */
export declare type CreateConfigurationRequest = Message<"story_configuration.v1.CreateConfigurationRequest"> & {
  /**
   * The name of the configuration to create. While not required to be unique, it is recommended to be, so it is not
   * confused with other configurations.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The ordered list of plot points selected for the current configuration.
   *
   * @generated from field: repeated story_configuration.v1.PlotPointConfiguration plot_points = 2;
   */
  plotPoints: PlotPointConfiguration[];
};

/**
 * Describes the message story_configuration.v1.CreateConfigurationRequest.
 * Use `create(CreateConfigurationRequestSchema)` to create a new message.
 */
export declare const CreateConfigurationRequestSchema: GenMessage<CreateConfigurationRequest>;

/**
 * @generated from message story_configuration.v1.UpdateConfigurationRequest
 */
export declare type UpdateConfigurationRequest = Message<"story_configuration.v1.UpdateConfigurationRequest"> & {
  /**
   * The ID of the existing configuration to update.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The name of the configuration to create. While not required to be unique, it is recommended to be, so it is not
   * confused with other configurations.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * The ordered list of plot points selected for the current configuration.
   *
   * @generated from field: repeated story_configuration.v1.PlotPointConfiguration plot_points = 3;
   */
  plotPoints: PlotPointConfiguration[];
};

/**
 * Describes the message story_configuration.v1.UpdateConfigurationRequest.
 * Use `create(UpdateConfigurationRequestSchema)` to create a new message.
 */
export declare const UpdateConfigurationRequestSchema: GenMessage<UpdateConfigurationRequest>;

/**
 * @generated from message story_configuration.v1.DeleteConfigurationRequest
 */
export declare type DeleteConfigurationRequest = Message<"story_configuration.v1.DeleteConfigurationRequest"> & {
  /**
   * The ID of the configuration to delete.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message story_configuration.v1.DeleteConfigurationRequest.
 * Use `create(DeleteConfigurationRequestSchema)` to create a new message.
 */
export declare const DeleteConfigurationRequestSchema: GenMessage<DeleteConfigurationRequest>;

/**
 * @generated from message story_configuration.v1.GetConfigurationResponse
 */
export declare type GetConfigurationResponse = Message<"story_configuration.v1.GetConfigurationResponse"> & {
  /**
   * The configuration that was retrieved.
   *
   * @generated from field: story_configuration.v1.Configuration configuration = 1;
   */
  configuration?: Configuration;
};

/**
 * Describes the message story_configuration.v1.GetConfigurationResponse.
 * Use `create(GetConfigurationResponseSchema)` to create a new message.
 */
export declare const GetConfigurationResponseSchema: GenMessage<GetConfigurationResponse>;

/**
 * @generated from message story_configuration.v1.ListConfigurationsResponse
 */
export declare type ListConfigurationsResponse = Message<"story_configuration.v1.ListConfigurationsResponse"> & {
  /**
   * The configurations that were retrieved.
   *
   * @generated from field: repeated story_configuration.v1.Configuration configurations = 1;
   */
  configurations: Configuration[];
};

/**
 * Describes the message story_configuration.v1.ListConfigurationsResponse.
 * Use `create(ListConfigurationsResponseSchema)` to create a new message.
 */
export declare const ListConfigurationsResponseSchema: GenMessage<ListConfigurationsResponse>;

/**
 * @generated from message story_configuration.v1.SearchConfigurationsResponse
 */
export declare type SearchConfigurationsResponse = Message<"story_configuration.v1.SearchConfigurationsResponse"> & {
  /**
   * A list of configuration ids, that matches the provided search query. The number of returned configuration ids may
   * be less than the number of provided IDs, if some of them are incorrect / don't point to an existing configuration.
   *
   * @generated from field: repeated string configuration_ids = 1;
   */
  configurationIds: string[];
};

/**
 * Describes the message story_configuration.v1.SearchConfigurationsResponse.
 * Use `create(SearchConfigurationsResponseSchema)` to create a new message.
 */
export declare const SearchConfigurationsResponseSchema: GenMessage<SearchConfigurationsResponse>;

/**
 * @generated from message story_configuration.v1.CreateConfigurationResponse
 */
export declare type CreateConfigurationResponse = Message<"story_configuration.v1.CreateConfigurationResponse"> & {
  /**
   * The configuration that was created.
   *
   * @generated from field: story_configuration.v1.Configuration configuration = 1;
   */
  configuration?: Configuration;
};

/**
 * Describes the message story_configuration.v1.CreateConfigurationResponse.
 * Use `create(CreateConfigurationResponseSchema)` to create a new message.
 */
export declare const CreateConfigurationResponseSchema: GenMessage<CreateConfigurationResponse>;

/**
 * @generated from message story_configuration.v1.UpdateConfigurationResponse
 */
export declare type UpdateConfigurationResponse = Message<"story_configuration.v1.UpdateConfigurationResponse"> & {
  /**
   * The configuration that was updated.
   *
   * @generated from field: story_configuration.v1.Configuration configuration = 1;
   */
  configuration?: Configuration;
};

/**
 * Describes the message story_configuration.v1.UpdateConfigurationResponse.
 * Use `create(UpdateConfigurationResponseSchema)` to create a new message.
 */
export declare const UpdateConfigurationResponseSchema: GenMessage<UpdateConfigurationResponse>;

/**
 * @generated from message story_configuration.v1.Configuration
 */
export declare type Configuration = Message<"story_configuration.v1.Configuration"> & {
  /**
   * The unique identifier of the configuration.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The display name of the configuration.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * The ordered list of plot points selected for the current configuration.
   *
   * @generated from field: repeated story_configuration.v1.PlotPointConfiguration plot_points = 3;
   */
  plotPoints: PlotPointConfiguration[];
};

/**
 * Describes the message story_configuration.v1.Configuration.
 * Use `create(ConfigurationSchema)` to create a new message.
 */
export declare const ConfigurationSchema: GenMessage<Configuration>;

/**
 * @generated from message story_configuration.v1.PlotPointConfiguration
 */
export declare type PlotPointConfiguration = Message<"story_configuration.v1.PlotPointConfiguration"> & {
  /**
   * The unique identifier of the related plot point.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The list of beats selected for the current plot point.
   *
   * @generated from field: repeated string beats_ids = 2;
   */
  beatsIds: string[];
};

/**
 * Describes the message story_configuration.v1.PlotPointConfiguration.
 * Use `create(PlotPointConfigurationSchema)` to create a new message.
 */
export declare const PlotPointConfigurationSchema: GenMessage<PlotPointConfiguration>;

/**
 * @generated from service story_configuration.v1.ConfigurationService
 */
export declare const ConfigurationService: GenService<{
  /**
   * Get a specific configuration details.
   *
   * @generated from rpc story_configuration.v1.ConfigurationService.GetConfiguration
   */
  getConfiguration: {
    methodKind: "unary";
    input: typeof GetConfigurationRequestSchema;
    output: typeof GetConfigurationResponseSchema;
  },
  /**
   * Return a list of configurations, based on a list of IDs provided.
   *
   * @generated from rpc story_configuration.v1.ConfigurationService.ListConfigurations
   */
  listConfigurations: {
    methodKind: "unary";
    input: typeof ListConfigurationsRequestSchema;
    output: typeof ListConfigurationsResponseSchema;
  },
  /**
   * Return a list of configuration ids, based on a search query. You can then use ListConfigurations to retrieve
   * the specific details of each configuration.
   *
   * @generated from rpc story_configuration.v1.ConfigurationService.SearchConfigurations
   */
  searchConfigurations: {
    methodKind: "unary";
    input: typeof SearchConfigurationsRequestSchema;
    output: typeof SearchConfigurationsResponseSchema;
  },
  /**
   * Create a new configuration.
   *
   * @generated from rpc story_configuration.v1.ConfigurationService.CreateConfiguration
   */
  createConfiguration: {
    methodKind: "unary";
    input: typeof CreateConfigurationRequestSchema;
    output: typeof CreateConfigurationResponseSchema;
  },
  /**
   * Update an existing configuration.
   *
   * @generated from rpc story_configuration.v1.ConfigurationService.UpdateConfiguration
   */
  updateConfiguration: {
    methodKind: "unary";
    input: typeof UpdateConfigurationRequestSchema;
    output: typeof UpdateConfigurationResponseSchema;
  },
  /**
   * Delete an existing configuration. This method should not fail if the configuration does not exist.
   *
   * @generated from rpc story_configuration.v1.ConfigurationService.DeleteConfiguration
   */
  deleteConfiguration: {
    methodKind: "unary";
    input: typeof DeleteConfigurationRequestSchema;
    output: typeof EmptySchema;
  },
}>;

